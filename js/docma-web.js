!function(t,e){"function"==typeof define&&define.amd&&!0===define.amd.dust?define("dust.core",[],e):"object"==typeof exports?module.exports=e():t.dust=e()}(this,function(){function getTemplate(t,e){if(t)return"function"==typeof t&&t.template?t.template:dust.isTemplateFn(t)?t:!1!==e?dust.cache[t]:void 0}function load(t,e,n){if(!t)return e.setError(new Error("No template or template name provided to render"));var r=getTemplate(t,dust.config.cache);return r?r(e,Context.wrap(n,r.templateName)):dust.onLoad?e.map(function(e){function r(t,r){var i;if(t)return e.setError(t);if(!(i=getTemplate(r,!1)||getTemplate(o,dust.config.cache))){if(!dust.compile)return e.setError(new Error("Dust compiler not available"));i=dust.loadSource(dust.compile(r,o))}i(e,Context.wrap(n,i.templateName)).end()}var o=t;3===dust.onLoad.length?dust.onLoad(o,n.options,r):dust.onLoad(o,r)}):e.setError(new Error("Template Not Found: "+t))}function Context(t,e,n,r,o){void 0===t||t instanceof Stack||(t=new Stack(t)),this.stack=t,this.global=e,this.options=n,this.blocks=r,this.templateName=o}function getWithResolvedData(t,e,n){return function(r){return t.push(r)._get(e,n)}}function Stack(t,e,n,r){this.tail=e,this.isObject=t&&"object"==typeof t,this.head=t,this.index=n,this.of=r}function Stub(t){this.head=new Chunk(this),this.callback=t,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(t,e,n){this.root=t,this.next=e,this.data=[],this.flushable=!1,this.taps=n}function Tap(t,e){this.head=t,this.tail=e}var dust={version:"2.7.2"},ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var t,e,n={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(t=console.log,e="function"==typeof t?function(){t.apply(console,arguments)}:function(){t(Array.prototype.slice.apply(arguments).join(" "))}):e=EMPTY_FUNC,dust.log=function(t,r){r=r||INFO,n[r]>=n[dust.debugLevel]&&e("[DUST:"+r+"]",t)},dust.debugLevel="NONE","undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(t,e){t&&(e.templateName=t,!1!==dust.config.cache&&(dust.cache[t]=e))},dust.render=function(t,e,n){var r=new Stub(n).head;try{load(t,r,e).end()}catch(t){r.setError(t)}},dust.stream=function(t,e){var n=new Stream,r=n.head;return dust.nextTick(function(){try{load(t,r,e).end()}catch(t){r.setError(t)}}),n},dust.loadSource=function(source){return eval(source)},Array.isArray?dust.isArray=Array.isArray:dust.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},dust.nextTick=function(){return function(t){setTimeout(t,0)}}(),dust.isEmpty=function(t){return!(0===t||(!dust.isArray(t)||t.length)&&t)},dust.isEmptyObject=function(t){var e;if(null===t)return!1;if(void 0===t)return!1;if(t.length>0)return!1;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0},dust.isTemplateFn=function(t){return"function"==typeof t&&t.__dustBody},dust.isThenable=function(t){return t&&"object"==typeof t&&"function"==typeof t.then},dust.isStreamable=function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pipe},dust.filter=function(t,e,n,r){var o,i,s,u;if(n)for(o=0,i=n.length;o<i;o++)s=n[o],s.length&&(u=dust.filters[s],"s"===s?e=null:"function"==typeof u?t=u(t,r):dust.log("Invalid filter `"+s+"`",WARN));return e&&(t=dust.filters[e](t,r)),t},dust.filters={h:function(t){return dust.escapeHtml(t)},j:function(t){return dust.escapeJs(t)},u:encodeURI,uc:encodeURIComponent,js:function(t){return dust.escapeJSON(t)},jp:function(t){return JSON?JSON.parse(t):(dust.log("JSON is undefined; could not parse `"+t+"`",WARN),t)}},dust.makeBase=dust.context=function(t,e){return new Context(void 0,t,e)},Context.wrap=function(t,e){return t instanceof Context?t:new Context(t,{},{},null,e)},Context.prototype.get=function(t,e){return"string"==typeof t&&("."===t[0]&&(e=!0,t=t.substr(1)),t=t.split(".")),this._get(e,t)},Context.prototype._get=function(t,e){var n,r,o,i,s,u=this.stack||{},a=1;if(r=e[0],o=e.length,t&&0===o)i=u,u=u.head;else{if(t)u&&(u=u.head?u.head[r]:void 0);else{for(;u&&(!u.isObject||(i=u.head,void 0===(n=u.head[r])));)u=u.tail;u=void 0!==n?n:this.global&&this.global[r]}for(;u&&a<o;){if(dust.isThenable(u))return u.then(getWithResolvedData(this,t,e.slice(a)));i=u,u=u[e[a]],a++}}return"function"==typeof u?(s=function(){try{return u.apply(i,arguments)}catch(t){throw dust.log(t,ERROR),t}},s.__dustBody=!!u.__dustBody,s):(void 0===u&&dust.log("Cannot find reference `{"+e.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),u)},Context.prototype.getPath=function(t,e){return this._get(t,e)},Context.prototype.push=function(t,e,n){return void 0===t?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(t,this.stack,e,n))},Context.prototype.pop=function(){var t=this.current();return this.stack=this.stack&&this.stack.tail,t},Context.prototype.rebase=function(t){return new Context(t,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var t=this.rebase();return t.stack=this.stack,t},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(t){var e,n,r;if("function"==typeof t&&(t=t(new Chunk,this).data.join("")),!(e=this.blocks))return dust.log("No blocks for context `"+t+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(n=e.length;n--;)if(r=e[n][t])return r;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(t){var e,n=this.blocks;return t?(e=n?n.concat([t]):[t],new Context(this.stack,this.global,this.options,e,this.getTemplateName())):this},Context.prototype.resolve=function(t){var e;return"function"!=typeof t?t:(e=(new Chunk).render(t,this),e instanceof Chunk?e.data.join(""):e)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var t=this.head;t;){if(!t.flushable)return t.error?(this.callback(t.error),dust.log("Rendering failed with error `"+t.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=t.data.join(""),t=t.next,this.head=t}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var t=this.head;t;){if(!t.flushable)return t.error?(this.emit("error",t.error),this.emit("end"),dust.log("Streaming failed with error `"+t.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",t.data.join("")),t=t.next,this.head=t}this.emit("end")},Stream.prototype.emit=function(t,e){var n,r,o=this.events||{},i=o[t]||[];if(!i.length)return dust.log("Stream broadcasting, but no listeners for `"+t+"`",DEBUG),!1;for(i=i.slice(0),n=0,r=i.length;n<r;n++)i[n](e);return!0},Stream.prototype.on=function(t,e){var n=this.events=this.events||{},r=n[t]=n[t]||[];return"function"!=typeof e?dust.log("No callback function provided for `"+t+"` event listener",WARN):r.push(e),this},Stream.prototype.pipe=function(t){if("function"!=typeof t.write||"function"!=typeof t.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var e=!1;return"function"==typeof t.emit&&t.emit("pipe",this),"function"==typeof t.on&&t.on("error",function(){e=!0}),this.on("data",function(n){if(!e)try{t.write(n,"utf8")}catch(t){dust.log(t,ERROR)}}).on("end",function(){if(!e)try{t.end(),e=!0}catch(t){dust.log(t,ERROR)}})},Chunk.prototype.write=function(t){var e=this.taps;return e&&(t=e.go(t)),this.data.push(t),this},Chunk.prototype.end=function(t){return t&&this.write(t),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(t){var e=new Chunk(this.root,this.next,this.taps),n=new Chunk(this.root,e,this.taps);this.next=n,this.flushable=!0;try{t(n)}catch(t){dust.log(t,ERROR),n.setError(t)}return e},Chunk.prototype.tap=function(t){var e=this.taps;return this.taps=e?e.push(t):new Tap(t),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(t,e){return t(this,e)},Chunk.prototype.reference=function(t,e,n,r){return"function"==typeof t?(t=t.apply(e.current(),[this,e,null,{auto:n,filters:r}]),t instanceof Chunk?t:this.reference(t,e,n,r)):dust.isThenable(t)?this.await(t,e,null,n,r):dust.isStreamable(t)?this.stream(t,e,null,n,r):dust.isEmpty(t)?this:this.write(dust.filter(t,n,r,e))},Chunk.prototype.section=function(t,e,n,r){var o,i,s,u=n.block,a=n.else,c=this;if("function"==typeof t&&!dust.isTemplateFn(t)){try{t=t.apply(e.current(),[this,e,n,r])}catch(t){return dust.log(t,ERROR),this.setError(t)}if(t instanceof Chunk)return t}if(dust.isEmptyObject(n))return c;if(dust.isEmptyObject(r)||(e=e.push(r)),dust.isArray(t)){if(u){if((i=t.length)>0){for(s=e.stack&&e.stack.head||{},s.$len=i,o=0;o<i;o++)s.$idx=o,c=u(c,e.push(t[o],o,i));return s.$idx=void 0,s.$len=void 0,c}if(a)return a(this,e)}}else{if(dust.isThenable(t))return this.await(t,e,n);if(dust.isStreamable(t))return this.stream(t,e,n);if(!0===t){if(u)return u(this,e)}else if(t||0===t){if(u)return u(this,e.push(t))}else if(a)return a(this,e)}return dust.log("Section without corresponding key in template `"+e.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(t,e,n){var r=n.block,o=n.else;if(dust.isEmpty(t)){if(o)return o(this,e)}else{if(r)return r(this,e);dust.log("No block for exists check in template `"+e.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(t,e,n){var r=n.block,o=n.else;if(dust.isEmpty(t)){if(r)return r(this,e);dust.log("No block for not-exists check in template `"+e.getTemplateName()+"`",DEBUG)}else if(o)return o(this,e);return this},Chunk.prototype.block=function(t,e,n){var r=t||n.block;return r?r(this,e):this},Chunk.prototype.partial=function(t,e,n,r){var o;return void 0===r&&(r=n,n=e),dust.isEmptyObject(r)||(n=n.clone(),o=n.pop(),n=n.push(r).push(o)),dust.isTemplateFn(t)?this.capture(t,e,function(t,e){n.templateName=t,load(t,e,n).end()}):(n.templateName=t,load(t,this,n))},Chunk.prototype.helper=function(t,e,n,r,o){var i,s=this,u=r.filters;if(void 0===o&&(o="h"),!dust.helpers[t])return dust.log("Helper `"+t+"` does not exist",WARN),s;try{return(i=dust.helpers[t](s,e,n,r))instanceof Chunk?i:("string"==typeof u&&(u=u.split("|")),dust.isEmptyObject(n)?s.reference(i,e,o,u):s.section(i,e,n,r))}catch(e){return dust.log("Error in helper `"+t+"`: "+e.message,ERROR),s.setError(e)}},Chunk.prototype.await=function(t,e,n,r,o){return this.map(function(i){t.then(function(t){i=n?i.section(t,e,n):i.reference(t,e,r,o),i.end()},function(t){var r=n&&n.error;r?i.render(r,e.push(t)).end():(dust.log("Unhandled promise rejection in `"+e.getTemplateName()+"`",INFO),i.end())})})},Chunk.prototype.stream=function(t,e,n,r,o){var i=n&&n.block,s=n&&n.error;return this.map(function(u){var a=!1;t.on("data",function(t){a||(i?u=u.map(function(n){n.render(i,e.push(t)).end()}):n||(u=u.reference(t,e,r,o)))}).on("error",function(t){a||(s?u.render(s,e.push(t)):dust.log("Unhandled stream error in `"+e.getTemplateName()+"`",INFO),a||(a=!0,u.end()))}).on("end",function(){a||(a=!0,u.end())})})},Chunk.prototype.capture=function(t,e,n){return this.map(function(r){var o=new Stub(function(t,e){t?r.setError(t):n(e,r)});t(o.head,e).end()})},Chunk.prototype.setError=function(t){return this.error=t,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(t){return new Tap(t,this)},Tap.prototype.go=function(t){for(var e=this;e;)t=e.head(t),e=e.tail;return t};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(t){return"string"==typeof t||t&&"function"==typeof t.toString?("string"!=typeof t&&(t=t.toString()),HCHARS.test(t)?t.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):t):t};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(t){return"string"==typeof t?t.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):t},dust.escapeJSON=function(t){return JSON?JSON.stringify(t).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+t+"`",WARN),t)},dust}),"function"==typeof define&&define.amd&&!0===define.amd.dust&&define(["require","dust.core"],function(t,e){return e.onLoad=function(e,n){t([e],function(){n()})},e});
!function(e,t){"function"==typeof define&&define.amd&&!0===define.amd.dust?define(["dust.core"],t):"object"==typeof exports?module.exports=t(require("dustjs-linkedin")):t(e.dust)}(this,function(e){function t(t,n,r){r=r||"INFO",t=t?"{@"+t+"}: ":"",e.log(t+n,r)}function n(e){l[e]||(t(e,"Deprecation warning: "+e+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),t(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+e.replace(/\W+/g,""),"WARN"),l[e]=!0)}function r(e){return e.stack.tail&&e.stack.tail.head&&void 0!==e.stack.tail.head.__select__}function s(e){return r(e)&&e.get("__select__")}function i(e,t){var n,r=e.stack.head,s=e.rebase();e.stack&&e.stack.tail&&(s.stack=e.stack.tail);var i={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(n in t)i[n]=t[n];return s.push({__select__:i}).push(r,e.stack.index,e.stack.of)}function o(e){var t,n;if(e.isDeferredPending=!0,e.deferreds.length)for(e.isDeferredComplete=!0,t=0,n=e.deferreds.length;t<n;t++)e.deferreds[t]();e.isDeferredPending=!1}function a(e,t){return"function"==typeof t?t.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):t}function c(e,t){return function(n,r,s,i){return u(n,r,s,i,e,t)}}function u(e,n,r,i,o,a){var c,u,l,f,k=r.block,p=r.else,y=s(n)||{};if(y.isResolved&&!y.isDeferredPending)return e;if(i.hasOwnProperty("key"))u=i.key;else{if(!y.hasOwnProperty("key"))return t(o,"No key specified","WARN"),e;u=y.key}return f=i.type||y.type,u=d(n.resolve(u),f),l=d(n.resolve(i.value),f),a(u,l)?(y.isPending||(c=!0,y.isPending=!0),k&&(e=e.render(k,n)),c&&(y.isResolved=!0)):p&&(e=e.render(p,n)),e}function d(e,t){switch(t&&(t=t.toLowerCase()),t){case"number":return+e;case"string":return String(e);case"boolean":return e="false"!==e&&e,Boolean(e);case"date":return new Date(e)}return e}var l={},f={tap:function(e,t,r){return n("tap"),r.resolve(e)},sep:function(e,t,n){var r=n.block;return t.stack.index===t.stack.of-1?e:r?r(e,t):e},first:function(e,t,n){return 0===t.stack.index?n.block(e,t):e},last:function(e,t,n){return t.stack.index===t.stack.of-1?n.block(e,t):e},contextDump:function(e,n,r,s){var i,o,c=n.resolve(s.to),u=n.resolve(s.key);switch(u){case"full":i=n.stack;break;default:i=n.stack.head}switch(o=JSON.stringify(i,a,2),c){case"console":t("contextDump",o);break;default:o=o.replace(/</g,"\\u003c"),e=e.write(o)}return e},math:function(e,n,r,a){var c,u=a.key,d=a.method,l=a.operand,f=a.round;if(!a.hasOwnProperty("key")||!a.method)return t("math","`key` or `method` was not provided","ERROR"),e;switch(u=parseFloat(n.resolve(u)),l=parseFloat(n.resolve(l)),d){case"mod":0===l&&t("math","Division by 0","ERROR"),c=u%l;break;case"add":c=u+l;break;case"subtract":c=u-l;break;case"multiply":c=u*l;break;case"divide":0===l&&t("math","Division by 0","ERROR"),c=u/l;break;case"ceil":case"floor":case"round":case"abs":c=Math[d](u);break;case"toint":c=parseInt(u,10);break;default:t("math","Method `"+d+"` is not supported","ERROR")}return void 0!==c&&(f&&(c=Math.round(c)),r&&r.block?(n=i(n,{key:c}),e=e.render(r.block,n),o(s(n))):e=e.write(c)),e},select:function(e,n,r,a){var c=r.block,u={};return a.hasOwnProperty("key")&&(u.key=n.resolve(a.key)),a.hasOwnProperty("type")&&(u.type=a.type),c?(n=i(n,u),e=e.render(c,n),o(s(n))):t("select","Missing body block","WARN"),e},eq:c("eq",function(e,t){return e===t}),ne:c("ne",function(e,t){return e!==t}),lt:c("lt",function(e,t){return e<t}),lte:c("lte",function(e,t){return e<=t}),gt:c("gt",function(e,t){return e>t}),gte:c("gte",function(e,t){return e>=t}),any:function(e,n,r,i){var o=s(n);return o?o.isDeferredComplete?t("any","Must not be nested inside {@any} or {@none} block","ERROR"):e=e.map(function(e){o.deferreds.push(function(){o.isResolved&&(e=e.render(r.block,n)),e.end()})}):t("any","Must be used inside a {@select} block","ERROR"),e},none:function(e,n,r,i){var o=s(n);return o?o.isDeferredComplete?t("none","Must not be nested inside {@any} or {@none} block","ERROR"):e=e.map(function(e){o.deferreds.push(function(){o.isResolved||(e=e.render(r.block,n)),e.end()})}):t("none","Must be used inside a {@select} block","ERROR"),e},size:function(t,n,r,s){var i,o,a=s.key;if((a=n.resolve(s.key))&&!0!==a)if(e.isArray(a))i=a.length;else if(!isNaN(parseFloat(a))&&isFinite(a))i=a;else if("object"==typeof a){i=0;for(o in a)a.hasOwnProperty(o)&&i++}else i=(a+"").length;else i=0;return t.write(i)}};for(var k in f)e.helpers[k]=f[k];return e});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.page=e()}}(function(){return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n||e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(n){"use strict";function r(e,t){if("function"==typeof e)return r("*",e);if("function"==typeof t)for(var n=new s(e),i=1;i<arguments.length;++i)r.callbacks.push(n.middleware(arguments[i]));else"string"==typeof e?r["string"==typeof t?"redirect":"show"](e,t):r.start(e)}function i(e){if(!e.handled){var t;t=y?g+v.hash.replace("#!",""):v.pathname+v.search,t!==e.canonicalPath&&(r.stop(),e.handled=!1,v.href=e.canonicalPath)}}function o(e){return"string"!=typeof e?e:m?decodeURIComponent(e.replace(/\+/g," ")):e}function a(e,t){"/"===e[0]&&0!==e.indexOf(g)&&(e=g+(y?"#!":"")+e);var n=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(g,"")||"/",y&&(this.path=this.path.replace("#!","")||"/"),this.title=document.title,this.state=t||{},this.state.path=e,this.querystring=~n?o(e.slice(n+1)):"",this.pathname=o(~n?e.slice(0,n):e),this.params={},this.hash="",!y){if(!~this.path.indexOf("#"))return;var r=this.path.split("#");this.path=r[0],this.hash=o(r[1])||"",this.querystring=this.querystring.split("#")[0]}}function s(e,t){t=t||{},this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=p(this.path,this.keys=[],t)}function c(e){if(1===u(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.path?e.path[0]:e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var i=t.getAttribute("href");if((y||t.pathname!==v.pathname||!t.hash&&"#"!==i)&&!(i&&i.indexOf("mailto:")>-1)&&!t.target&&f(t.href)){var o=t.pathname+t.search+(t.hash||"");void 0!==n&&o.match(/^\/[a-zA-Z]:\//)&&(o=o.replace(/^\/[a-zA-Z]:\//,"/"));var a=o;0===o.indexOf(g)&&(o=o.substr(g.length)),y&&(o=o.replace("#!","")),g&&a===o||(e.preventDefault(),r.show(a))}}}}function u(e){return e=e||window.event,null===e.which?e.button:e.which}function f(e){var t=v.protocol+"//"+v.hostname;return v.port&&(t+=":"+v.port),e&&0===e.indexOf(t)}var p=e("path-to-regexp");t.exports=r;var h,d,l="undefined"!=typeof document&&document.ontouchstart?"touchstart":"click",v="undefined"!=typeof window&&(window.history.location||window.location),w=!0,m=!0,g="",y=!1;r.callbacks=[],r.exits=[],r.current="",r.len=0,r.base=function(e){if(0===arguments.length)return g;g=e},r.start=function(e){if(e=e||{},!h&&(h=!0,!1===e.dispatch&&(w=!1),!1===e.decodeURLComponents&&(m=!1),!1!==e.popstate&&window.addEventListener("popstate",x,!1),!1!==e.click&&document.addEventListener(l,c,!1),!0===e.hashbang&&(y=!0),w)){var t=y&&~v.hash.indexOf("#!")?v.hash.substr(2)+v.search:v.pathname+v.search+v.hash;r.replace(t,null,!0,w)}},r.stop=function(){h&&(r.current="",r.len=0,h=!1,document.removeEventListener(l,c,!1),window.removeEventListener("popstate",x,!1))},r.show=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,!1!==n&&r.dispatch(o),!1!==o.handled&&!1!==i&&o.pushState(),o},r.back=function(e,t){r.len>0?(history.back(),r.len--):e?setTimeout(function(){r.show(e,t)}):setTimeout(function(){r.show(g,t)})},r.redirect=function(e,t){"string"==typeof e&&"string"==typeof t&&r(e,function(e){setTimeout(function(){r.replace(t)},0)}),"string"==typeof e&&void 0===t&&setTimeout(function(){r.replace(e)},0)},r.replace=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,o.init=n,o.save(),!1!==i&&r.dispatch(o),o},r.dispatch=function(e){function t(){var e=r.exits[s++];if(!e)return n();e(o,t)}function n(){var t=r.callbacks[a++];return e.path!==r.current?void(e.handled=!1):t?void t(e,n):i(e)}var o=d,a=0,s=0;d=e,o?t():n()},r.exit=function(e,t){if("function"==typeof e)return r.exit("*",e);for(var n=new s(e),i=1;i<arguments.length;++i)r.exits.push(n.middleware(arguments[i]))},r.Context=a,a.prototype.pushState=function(){r.len++,history.pushState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},a.prototype.save=function(){history.replaceState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},r.Route=s,s.prototype.middleware=function(e){var t=this;return function(n,r){if(t.match(n.path,n.params))return e(n,r);r()}},s.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,a=this.regexp.exec(decodeURIComponent(i));if(!a)return!1;for(var s=1,c=a.length;s<c;++s){var u=n[s-1],f=o(a[s]);void 0===f&&hasOwnProperty.call(t,u.name)||(t[u.name]=f)}return!0};var x=function(){var e=!1;if("undefined"!=typeof window)return"complete"===document.readyState?e=!0:window.addEventListener("load",function(){setTimeout(function(){e=!0},0)}),function(t){if(e)if(t.state){var n=t.state.path;r.replace(n,t.state)}else r.show(v.pathname+v.hash,void 0,void 0,!1)}}();r.sameOrigin=f}).call(this,e("_process"))},{_process:2,"path-to-regexp":3}],2:[function(e,t,n){function r(){}var i=t.exports={};i.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};var r=[];if(t){var i=document.createElement("div");return new MutationObserver(function(){var e=r.slice();r.length=0,e.forEach(function(e){e()})}).observe(i,{attributes:!0}),function(e){r.length||i.setAttribute("yes","no"),r.push(e)}}return n?(window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),r.length>0)){r.shift()()}},!0),function(e){r.push(e),window.postMessage("process-tick","*")}):function(e){setTimeout(e,0)}}(),i.title="browser",i.browser=!0,i.env={},i.argv=[],i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")}},{}],3:[function(e,t,n){function r(e){for(var t,n=[],r=0,i=0,o="";null!=(t=w.exec(e));){var a=t[0],c=t[1],u=t.index;if(o+=e.slice(i,u),i=u+a.length,c)o+=c[1];else{o&&(n.push(o),o="");var f=t[2],p=t[3],h=t[4],d=t[5],l=t[6],v=t[7],m="+"===l||"*"===l,g="?"===l||"*"===l,y=f||"/",x=h||d||(v?".*":"[^"+y+"]+?");n.push({name:p||r++,prefix:f||"",delimiter:y,optional:g,repeat:m,pattern:s(x)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function i(e){return o(r(e))}function o(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^"+e[n].pattern+"$"));return function(n){for(var r="",i=n||{},o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var s,c=i[a.name];if(null==c){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(v(c)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+c+'"');if(0===c.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(s=encodeURIComponent(c[u]),!t[o].test(s))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=(0===u?a.prefix:a.delimiter)+s}}else{if(s=encodeURIComponent(c),!t[o].test(s))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=a.prefix+s}}else r+=a}return r}}function a(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function u(e){return e.sensitive?"":"i"}function f(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return c(e,t)}function p(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(l(e[i],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",u(n)),t)}function h(e,t,n){for(var i=r(e),o=d(i,n),a=0;a<i.length;a++)"string"!=typeof i[a]&&t.push(i[a]);return c(o,t)}function d(e,t){t=t||{};for(var n=t.strict,r=!1!==t.end,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),c=0;c<e.length;c++){var f=e[c];if("string"==typeof f)i+=a(f);else{var p=a(f.prefix),h=f.pattern;f.repeat&&(h+="(?:"+p+h+")*"),h=f.optional?p?"(?:"+p+"("+h+"))?":"("+h+")?":p+"("+h+")",i+=h}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,u(t))}function l(e,t,n){return t=t||[],v(t)?n||(n={}):(n=t,t=[]),e instanceof RegExp?f(e,t,n):v(e)?p(e,t,n):h(e,t,n)}var v=e("isarray");t.exports=l,t.exports.parse=r,t.exports.compile=i,t.exports.tokensToFunction=o,t.exports.tokensToRegExp=d;var w=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},{isarray:4}],4:[function(e,t,n){t.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},{}]},{},[1])(1)});
(function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var r=e.prototype,i=this,s=i.EventEmitter;r.getListeners=function(e){var t,n,r=this._getEvents();if(e instanceof RegExp){t={};for(n in r)r.hasOwnProperty(n)&&e.test(n)&&(t[n]=r[n])}else t=r[e]||(r[e]=[]);return t},r.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},r.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},r.addListener=function(e,n){var r,i=this.getListenersAsObject(e),s="object"==typeof n;for(r in i)i.hasOwnProperty(r)&&-1===t(i[r],n)&&i[r].push(s?n:{listener:n,once:!1});return this},r.on=n("addListener"),r.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},r.once=n("addOnceListener"),r.defineEvent=function(e){return this.getListeners(e),this},r.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},r.removeListener=function(e,n){var r,i,s=this.getListenersAsObject(e);for(i in s)s.hasOwnProperty(i)&&-1!==(r=t(s[i],n))&&s[i].splice(r,1);return this},r.off=n("removeListener"),r.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},r.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},r.manipulateListeners=function(e,t,n){var r,i,s=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(r=n.length;r--;)s.call(this,t,n[r]);else for(r in t)t.hasOwnProperty(r)&&(i=t[r])&&("function"==typeof i?s.call(this,r,i):o.call(this,r,i));return this},r.removeEvent=function(e){var t,n=typeof e,r=this._getEvents();if("string"===n)delete r[e];else if(e instanceof RegExp)for(t in r)r.hasOwnProperty(t)&&e.test(t)&&delete r[t];else delete this._events;return this},r.removeAllListeners=n("removeEvent"),r.emitEvent=function(e,t){var n,r,i,s,o=this.getListenersAsObject(e);for(s in o)if(o.hasOwnProperty(s))for(n=o[s].slice(0),i=0;i<n.length;i++)r=n[i],!0===r.once&&this.removeListener(e,r.listener),r.listener.apply(this,t||[])===this._getOnceReturnValue()&&this.removeListener(e,r.listener);return this},r.trigger=n("emitEvent"),r.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},r.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},r._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},r._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return i.EventEmitter=s,e},"function"==typeof define&&define.amd?define(function(){return e}):"object"==typeof module&&module.exports?module.exports=e:i.EventEmitter=e}).call(this);
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.</div></div><br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_1},{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_2},{}).w("<div id=\"page-content-wrapper\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\">").s(ctx.get(["documentation"], false),ctx,{"block":body_3},{}).w("</div></div><br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-toggle\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><div id=\"docma-content\"></div></div></div><br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar navbar-default navbar-fixed-top\"><div class=\"").x(ctx.get(["boxed"], false),ctx,{"else":body_2,"block":body_3},{}).w("\"><div class=\"nav navbar-left nav-left\"><div class=\"navbar-brand\"><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></div></div>").h("gt",ctx,{"block":body_4},{"key":ctx.getPath(false, ["template","options","navItems","length"]),"value":0},"h").w("</div></nav>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("container-fluid");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<ul class=\"nav navbar-nav\">").s(ctx.getPath(false, ["template","options","navItems"]),ctx,{"block":body_5},{}).w("</ul>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_6,"block":body_7},{});}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_8,"block":body_9},{}).w("\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;").f(ctx.get(["label"], false),ctx,"h").w("&nbsp;<span class=\"caret\"></span></a><ul class=\"dropdown-menu\">").s(ctx.get(["items"], false),ctx,{"block":body_10},{}).w("</ul></li>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("#");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_10.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_5},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).f(ctx.get(["label"], false),ctx,"h",["s"]).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"block":body_3},{}).w("</td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div class=\"sidebar-title\"><span><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></span></div>").x(ctx.getPath(false, ["template","options","search"]),ctx,{"block":body_1},{}).w("</div><div class=\"sidebar-nav-container\"><ul class=\"sidebar-nav\">").s(ctx.get(["symbols"], false),ctx,{"block":body_2},{}).w("</ul><div class=\"sidebar-nav-space\"></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-search\"><input id=\"txt-search\" type=\"search\" class=\"form-control\" placeholder=\"Search...\" /><div class=\"sidebar-search-clean\"><span class=\"glyphicon glyphicon-remove-circle\"></span></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$menuitem"]).w("</li>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.w("<div id=\"").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\"><span class=\"glyphicon glyphicon-link color-gray-light\" aria-hidden=\"true\"></span><code class=\"symbol-name\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.get(["symbol"], false),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.get(["symbol"], false),ctx,"h",["$type"]).w("</code></a>").f(ctx.get(["symbol"], false),ctx,"h",["s","$tags"]).w("</div>").x(ctx.getPath(false, ["symbol","augments"]),ctx,{"block":body_1},{}).x(ctx.getPath(false, ["symbol","alias"]),ctx,{"block":body_2},{}).w("</div><div class=\"symbol-definition\">").x(ctx.getPath(false, ["symbol","classdesc"]),ctx,{"block":body_3},{}).f(ctx.get(["symbol"], false),ctx,"h",["s","$desc"]).x(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_8},{}).h("eq",ctx,{"else":body_13,"block":body_16},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","returns"]),ctx,{"block":body_17},{}).x(ctx.getPath(false, ["symbol","exceptions"]),ctx,{"block":body_20},{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_23},{}).x(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_24},{}).x(ctx.getPath(false, ["template","options","symbolMeta"]),ctx,{"block":body_26},{}).w("</div></div><hr />").h("eq",ctx,{"block":body_30},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_32,"block":body_34},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Extends:</b> ").f(ctx.get(["symbol"], false),ctx,"h",["s","$extends"]).w("</p>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Alias:</b> <code>").f(ctx.getPath(false, ["symbol","alias"]),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<table>").x(ctx.getPath(false, ["symbol","version"]),ctx,{"block":body_4},{}).x(ctx.getPath(false, ["symbol","copyright"]),ctx,{"block":body_5},{}).x(ctx.getPath(false, ["symbol","author"]),ctx,{"block":body_6},{}).x(ctx.getPath(false, ["symbol","license"]),ctx,{"block":body_7},{}).w("</table><br />");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<tr><td><b>Version:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","version"]),ctx,"h",["s"]).w("</td></tr>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><b>Copyright:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","copyright"]),ctx,"h",["s"]).w("</td></tr>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<tr><td><b>Author:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","author"]),ctx,"h",["s","$author"]).w("</td></tr>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<tr><td><b>License:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","license"]),ctx,"h",["s"]).w("</td></tr>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b>See</b>").h("gt",ctx,{"else":body_9,"block":body_11},{"key":ctx.getPath(false, ["symbol","see","length"]),"value":1},"h").w("</p><br />");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_10},{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<ul>").s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_12},{}).w("</ul>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.get(["symbol"], false)),{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_14,"block":body_15},{});}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_14.__dustBody=!0;function body_15(chk,ctx){return chk;}body_15.__dustBody=!0;function body_16(chk,ctx){return chk;}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.h("gt",ctx,{"else":body_18,"block":body_19},{"key":ctx.getPath(false, ["symbol","returns","length"]),"value":"1","type":"number"},"h");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.w("<p><b>Returns:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<b>Returns:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["symbol","exceptions","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b>Throws:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b>Throws:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.w("<p><b>Example</b></p>").s(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt"]).w("</code></pre>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_27},{});}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.w("<p class=\"symbol-meta\">").x(ctx.getPath(false, ["symbol","meta","filename"]),ctx,{"block":body_28},{}).x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_29},{}).w("</p>");}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.w("<b>File:</b> ").f(ctx.getPath(false, ["symbol","meta","filename"]),ctx,"h").w("&nbsp;&nbsp;");}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.w("<b>Line:</b> ").f(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,"h").w("&nbsp;&nbsp;");}body_29.__dustBody=!0;function body_30(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","$constructor"]),ctx,{"block":body_31},{});}body_30.__dustBody=!0;function body_31(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(false, ["symbol","$constructor"]),"template":ctx.get(["template"], false)});}body_31.__dustBody=!0;function body_32(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","$members"]),ctx,{"block":body_33},{});}body_32.__dustBody=!0;function body_33(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_33.__dustBody=!0;function body_34(chk,ctx){return chk;}body_34.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var docma = {"routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null},{"id":"api:RainCache","type":"api","name":"RainCache","path":"/?api=RainCache","contentPath":null},{"id":"api:Connectors","type":"api","name":"Connectors","path":"/?api=Connectors","contentPath":null},{"id":"api:StorageEngines","type":"api","name":"StorageEngines","path":"/?api=StorageEngines","contentPath":null},{"id":"content:index","type":"content","name":"index","path":"/?content=index","contentPath":"content/index.html"}],"apis":{"_def_":{"documentation":[],"symbols":[]},"RainCache":{"documentation":[{"comment":"/**\n     * Base class for all cache classes.\n     *\n     * You should **not** create BaseCache by itself, but instead create a class that extends from it.\n     *\n     * **All Methods from BaseCache are also available on every class that is extending it.**\n     * @property {StorageEngine} storageEngine - storage engine of the cache\n     * @property {String} namespace=base - namespace of the cache\n     * @property {String} [boundGuild] - guild id bound to this cache\n     */","meta":{"range":[517,606],"filename":"BaseCache.js","lineno":13,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000007","name":"BaseCache","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Base class for all cache classes.</p>\n<p>You should <strong>not</strong> create BaseCache by itself, but instead create a class that extends from it.</p>\n<p><strong>All Methods from BaseCache are also available on every class that is extending it.</strong></p>","properties":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine of the cache</p>","name":"storageEngine"},{"type":{"names":["String"]},"defaultvalue":"base","description":"<p>namespace of the cache</p>","name":"namespace"},{"type":{"names":["String"]},"optional":true,"description":"<p>guild id bound to this cache</p>","name":"boundGuild"}],"name":"BaseCache","longname":"BaseCache","kind":"class","scope":"global","params":[],"$longname":"BaseCache","$members":[{"comment":"/**\n     * Add an id to the index of a namespace\n     * @param {String} id - id to add\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[1685,1814],"filename":"BaseCache.js","lineno":54,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000075","name":"BaseCache#addToIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Add an id to the index of a namespace</p>","params":[{"type":{"names":["String"]},"description":"<p>id to add</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"BaseCache#addToIndex","kind":"function","memberof":"BaseCache","scope":"instance","async":true,"$longname":"BaseCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"BaseCache#bindGuild","kind":"function","memberof":"BaseCache","scope":"instance","$longname":"BaseCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"BaseCache#bindObject","kind":"function","memberof":"BaseCache","scope":"instance","$longname":"BaseCache#bindObject"},{"comment":"/**\n     * Build an id consisting of $namespace.$id\n     * @param {String} id - id to append to namespace\n     * @return {String} - constructed id\n     */","meta":{"range":[1398,1459],"filename":"BaseCache.js","lineno":44,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000061","name":"BaseCache#buildId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Build an id consisting of $namespace.$id</p>","params":[{"type":{"names":["String"]},"description":"<p>id to append to namespace</p>","name":"id"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>constructed id</li>\n</ul>"}],"name":"buildId","longname":"BaseCache#buildId","kind":"function","memberof":"BaseCache","scope":"instance","$longname":"BaseCache#buildId"},{"comment":"/**\n     * Get the number of elements that are within an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<Number>}\n     */","meta":{"range":[3408,3535],"filename":"BaseCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000186","name":"BaseCache#getIndexCount","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get the number of elements that are within an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Number>"]}}],"name":"getIndexCount","longname":"BaseCache#getIndexCount","kind":"function","memberof":"BaseCache","scope":"instance","async":true,"$longname":"BaseCache#getIndexCount"},{"comment":"/**\n     * Get all members from an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<String[]>}\n     */","meta":{"range":[2784,2915],"filename":"BaseCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000144","name":"BaseCache#getIndexMembers","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get all members from an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"BaseCache#getIndexMembers","kind":"function","memberof":"BaseCache","scope":"instance","async":true,"$longname":"BaseCache#getIndexMembers"},{"comment":"/**\n     * Check if an id is a member of an index\n     * @param {String} id - id to check\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<boolean>} - returns true if it is a part of the index, false otherwise\n     */","meta":{"range":[2469,2600],"filename":"BaseCache.js","lineno":74,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000121","name":"BaseCache#isIndexed","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Check if an id is a member of an index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to check</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>returns true if it is a part of the index, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"BaseCache#isIndexed","kind":"function","memberof":"BaseCache","scope":"instance","async":true,"$longname":"BaseCache#isIndexed"},{"comment":"/**\n     * Remove an id from the index\n     * @param {String} id - id to be removed\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[2037,2176],"filename":"BaseCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000098","name":"BaseCache#removeFromIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Remove an id from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to be removed</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"BaseCache#removeFromIndex","kind":"function","memberof":"BaseCache","scope":"instance","async":true,"$longname":"BaseCache#removeFromIndex"},{"comment":"/**\n     * Delete an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[3081,3204],"filename":"BaseCache.js","lineno":92,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000165","name":"BaseCache#removeIndex","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Delete an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"BaseCache#removeIndex","kind":"function","memberof":"BaseCache","scope":"instance","async":true,"$longname":"BaseCache#removeIndex"}]},{"comment":"/**\n * @typedef {Object} Channel - a discord channel object\n * @property {String} id - id of the channel\n * @property {Number} type - [type](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-types) of channel\n * @property {String} [guild_id] - id of the Guild of the channel\n * @property {Number} [position] - sorting position of the channel\n * @property {PermissionOverwrite[]} [permission_overwrites] - array of permission overwrites for this channel\n * @property {String} [name] - name of the channel\n * @property {String} [topic] - topic of the channel\n * @property {Boolean} [nsfw] - if the channel is nsfw (guild only)\n * @property {String} [last_message_id] - the id of the last message sent in this channel\n * @property {Number} [bitrate] - bitrate of the channel (voice only)\n * @property {Number} [user_limit] - limit of users in a channel (voice only)\n * @property {User[]} [recipients] - recipients of a dm (dm only)\n * @property {String} [icon] - icon hash (dm only)\n * @property {String} [owner_id] - id of the DM creator (dm only)\n * @property {String} [application_id] - application id of the creator of the group dm if a bot created it (group dm only)\n * @property {String} [parent_id] - id of the parent category for a channel\n */","meta":{"filename":"ChannelCache.js","lineno":178,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"Channel","type":{"names":["Object"]},"description":"<p>a discord channel object</p>","properties":[{"type":{"names":["String"]},"description":"<p>id of the channel</p>","name":"id"},{"type":{"names":["Number"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-types\">type</a> of channel</p>","name":"type"},{"type":{"names":["String"]},"optional":true,"description":"<p>id of the Guild of the channel</p>","name":"guild_id"},{"type":{"names":["Number"]},"optional":true,"description":"<p>sorting position of the channel</p>","name":"position"},{"type":{"names":["Array.<PermissionOverwrite>"]},"optional":true,"description":"<p>array of permission overwrites for this channel</p>","name":"permission_overwrites"},{"type":{"names":["String"]},"optional":true,"description":"<p>name of the channel</p>","name":"name"},{"type":{"names":["String"]},"optional":true,"description":"<p>topic of the channel</p>","name":"topic"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the channel is nsfw (guild only)</p>","name":"nsfw"},{"type":{"names":["String"]},"optional":true,"description":"<p>the id of the last message sent in this channel</p>","name":"last_message_id"},{"type":{"names":["Number"]},"optional":true,"description":"<p>bitrate of the channel (voice only)</p>","name":"bitrate"},{"type":{"names":["Number"]},"optional":true,"description":"<p>limit of users in a channel (voice only)</p>","name":"user_limit"},{"type":{"names":["Array.<User>"]},"optional":true,"description":"<p>recipients of a dm (dm only)</p>","name":"recipients"},{"type":{"names":["String"]},"optional":true,"description":"<p>icon hash (dm only)</p>","name":"icon"},{"type":{"names":["String"]},"optional":true,"description":"<p>id of the DM creator (dm only)</p>","name":"owner_id"},{"type":{"names":["String"]},"optional":true,"description":"<p>application id of the creator of the group dm if a bot created it (group dm only)</p>","name":"application_id"},{"type":{"names":["String"]},"optional":true,"description":"<p>id of the parent category for a channel</p>","name":"parent_id"}],"longname":"Channel","scope":"global","$longname":"Channel"},{"comment":"/**\n * Cache responsible for storing channel related data\n * @extends BaseCache\n */","meta":{"range":[139,6443],"filename":"ChannelCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000223","name":"ChannelCache","type":"ClassDeclaration","paramnames":["storageEngine","channelMap","permissionOverwriteCache","userCache","boundObject"]}},"classdesc":"<p>Cache responsible for storing channel related data</p>","augments":["BaseCache"],"name":"ChannelCache","longname":"ChannelCache","kind":"class","scope":"global","description":"<p>Create a new ChanneCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["ChannelMapCache"]},"description":"<p>Instantiated ChannelMap class</p>","name":"channelMap"},{"type":{"names":["PermissionOverwriteCache"]},"description":"<p>Instantiated PermissionOverwriteCache class</p>","name":"permissionOverwriteCache"},{"type":{"names":["UserCache"]},"description":"<p>Instantiated UserCache class</p>","name":"userCache"},{"type":{"names":["Channel"]},"optional":true,"description":"<p>Optional, may be used to bind a channel object to this cache</p>","name":"boundObject"}],"$longname":"ChannelCache","$members":[{"comment":"/**\n     * Add a channel to the channel index\n     * @param {String} id - id of the channel\n     * @returns {Promise.<void>}\n     */","meta":{"range":[5203,5296],"filename":"ChannelCache.js","lineno":129,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000664","name":"ChannelCache#addToIndex","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Add a channel to the channel index</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the channel</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"ChannelCache#addToIndex","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"overrides":"BaseCache#addToIndex","$longname":"ChannelCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"ChannelCache#bindGuild","kind":"function","memberof":"ChannelCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"ChannelCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"ChannelCache#bindObject","kind":"function","memberof":"ChannelCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"ChannelCache#bindObject"},{"comment":"/**\n     * Build an id consisting of $namespace.$id\n     * @param {String} id - id to append to namespace\n     * @return {String} - constructed id\n     */","meta":{"range":[1398,1459],"filename":"BaseCache.js","lineno":44,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000061","name":"BaseCache#buildId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Build an id consisting of $namespace.$id</p>","params":[{"type":{"names":["String"]},"description":"<p>id to append to namespace</p>","name":"id"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>constructed id</li>\n</ul>"}],"name":"buildId","longname":"ChannelCache#buildId","kind":"function","memberof":"ChannelCache","scope":"instance","inherits":"BaseCache#buildId","inherited":true,"$longname":"ChannelCache#buildId"},{"comment":"/**\n     * Filter through the collection of channels\n     * @param {Function} fn - Filter function\n     * @param {String[]} channelMap - Array of ids used for the filter\n     * @returns {Promise.<ChannelCache[]>} - array of channel caches with bound results\n     */","meta":{"range":[4226,4504],"filename":"ChannelCache.js","lineno":108,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000572","name":"ChannelCache#filter","type":"MethodDefinition","paramnames":["fn","channelMap"]},"vars":{"":null}},"description":"<p>Filter through the collection of channels</p>","params":[{"type":{"names":["function"]},"description":"<p>Filter function</p>","name":"fn"},{"type":{"names":["Array.<String>"]},"description":"<p>Array of ids used for the filter</p>","name":"channelMap"}],"returns":[{"type":{"names":["Promise.<Array.<ChannelCache>>"]},"description":"<ul>\n<li>array of channel caches with bound results</li>\n</ul>"}],"name":"filter","longname":"ChannelCache#filter","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"$longname":"ChannelCache#filter"},{"comment":"/**\n     * Filter through the collection of channels and return on the first result\n     * @param {Function} fn - Filter function\n     * @param {String[]} channelMap - Array of ids used for the filter\n     * @returns {ChannelCache} - First result bound to a channel cache\n     */","meta":{"range":[4794,5060],"filename":"ChannelCache.js","lineno":119,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000621","name":"ChannelCache#find","type":"MethodDefinition","paramnames":["fn","channelMap"]},"vars":{"":null}},"description":"<p>Filter through the collection of channels and return on the first result</p>","params":[{"type":{"names":["function"]},"description":"<p>Filter function</p>","name":"fn"},{"type":{"names":["Array.<String>"]},"description":"<p>Array of ids used for the filter</p>","name":"channelMap"}],"returns":[{"type":{"names":["ChannelCache"]},"description":"<ul>\n<li>First result bound to a channel cache</li>\n</ul>"}],"name":"find","longname":"ChannelCache#find","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"$longname":"ChannelCache#find"},{"comment":"/**\n     * Get a channel via id\n     * @param {String} id - id of the channel\n     * @returns {Promise.<ChannelCache|null>} - ChannelCache with bound object or null if nothing was found\n     */","meta":{"range":[1705,2101],"filename":"ChannelCache.js","lineno":40,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000278","name":"ChannelCache#get","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Get a channel via id</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the channel</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<(ChannelCache|null)>"]},"description":"<ul>\n<li>ChannelCache with bound object or null if nothing was found</li>\n</ul>"}],"name":"get","longname":"ChannelCache#get","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"$longname":"ChannelCache#get"},{"comment":"/**\n     * Get the number of channels that are currently cached\n     * @return {Promise.<Number>} - Number of channels currently cached\n     */","meta":{"range":[6348,6441],"filename":"ChannelCache.js","lineno":171,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000740","name":"ChannelCache#getIndexCount","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get the number of channels that are currently cached</p>","returns":[{"type":{"names":["Promise.<Number>"]},"description":"<ul>\n<li>Number of channels currently cached</li>\n</ul>"}],"name":"getIndexCount","longname":"ChannelCache#getIndexCount","kind":"function","memberof":"ChannelCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#getIndexCount","$longname":"ChannelCache#getIndexCount"},{"comment":"/**\n     * Get a list of ids of indexed channels\n     * @returns {Promise.<String[]>}\n     */","meta":{"range":[5879,5976],"filename":"ChannelCache.js","lineno":155,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000712","name":"ChannelCache#getIndexMembers","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get a list of ids of indexed channels</p>","returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"ChannelCache#getIndexMembers","kind":"function","memberof":"ChannelCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#getIndexMembers","$longname":"ChannelCache#getIndexMembers"},{"comment":"/**\n     * Check if a channel is indexed\n     * @param {String} id - id of the channel\n     * @returns {Promise.<Boolean>}\n     */","meta":{"range":[5680,5775],"filename":"ChannelCache.js","lineno":147,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000696","name":"ChannelCache#isIndexed","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Check if a channel is indexed</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the channel</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<Boolean>"]}}],"name":"isIndexed","longname":"ChannelCache#isIndexed","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"overrides":"BaseCache#isIndexed","$longname":"ChannelCache#isIndexed"},{"comment":"/**\n     * Remove a channel from the cache\n     * @param {String} id - id of the channel\n     * @returns {Promise.<void>}\n     */","meta":{"range":[3578,3950],"filename":"ChannelCache.js","lineno":89,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000512","name":"ChannelCache#remove","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Remove a channel from the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the channel</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"ChannelCache#remove","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"$longname":"ChannelCache#remove"},{"comment":"/**\n     * Remove a channel from the index\n     * @param {String} id - id of the channel\n     * @returns {Promise.<void>}\n     */","meta":{"range":[5436,5539],"filename":"ChannelCache.js","lineno":138,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000680","name":"ChannelCache#removeFromIndex","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Remove a channel from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the channel</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"ChannelCache#removeFromIndex","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"overrides":"BaseCache#removeFromIndex","$longname":"ChannelCache#removeFromIndex"},{"comment":"/**\n     * Remove the channel index, you should probably not call this at all :<\n     * @returns {Promise.<*>}\n     */","meta":{"range":[6105,6194],"filename":"ChannelCache.js","lineno":163,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000726","name":"ChannelCache#removeIndex","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Remove the channel index, you should probably not call this at all :&lt;</p>","returns":[{"type":{"names":["Promise.<*>"]}}],"name":"removeIndex","longname":"ChannelCache#removeIndex","kind":"function","memberof":"ChannelCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#removeIndex","$longname":"ChannelCache#removeIndex"},{"comment":"/**\n     * Upsert a channel into the cache\n     * @param {String} id - id of the channel\n     * @param {Object} data - data to insert\n     * @returns {Promise.<ChannelCache>}\n     */","meta":{"range":[2294,3438],"filename":"ChannelCache.js","lineno":58,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000335","name":"ChannelCache#update","type":"MethodDefinition","paramnames":["id","data"]},"vars":{"":null}},"description":"<p>Upsert a channel into the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the channel</p>","name":"id"},{"type":{"names":["Object"]},"description":"<p>data to insert</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<ChannelCache>"]}}],"name":"update","longname":"ChannelCache#update","kind":"function","memberof":"ChannelCache","scope":"instance","async":true,"$longname":"ChannelCache#update"}],"$constructor":{"comment":"/**\n     * Create a new ChanneCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - storage engine to use for this cache\n     * @param {ChannelMapCache} channelMap - Instantiated ChannelMap class\n     * @param {PermissionOverwriteCache} permissionOverwriteCache - Instantiated PermissionOverwriteCache class\n     * @param {UserCache} userCache - Instantiated UserCache class\n     * @param {Channel} [boundObject] - Optional, may be used to bind a channel object to this cache\n     * @property {String} namespace=channel - namespace of the cache, defaults to `channel`\n     * @property {ChannelMapCache} guildChannelMap - Instantiated ChannelMap class\n     * @property {PermissionOverwriteCache} permissionOverwrites - Instantiated PermissionOverwrite class\n     * @property {UserCache} recipients - Instantiated UserCache class\n     */","meta":{"range":[1092,1501],"filename":"ChannelCache.js","lineno":23,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000227","name":"ChannelCache","type":"MethodDefinition","paramnames":["storageEngine","channelMap","permissionOverwriteCache","userCache","boundObject"]},"vars":{"":null}},"description":"<p>Create a new ChanneCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["ChannelMapCache"]},"description":"<p>Instantiated ChannelMap class</p>","name":"channelMap"},{"type":{"names":["PermissionOverwriteCache"]},"description":"<p>Instantiated PermissionOverwriteCache class</p>","name":"permissionOverwriteCache"},{"type":{"names":["UserCache"]},"description":"<p>Instantiated UserCache class</p>","name":"userCache"},{"type":{"names":["Channel"]},"optional":true,"description":"<p>Optional, may be used to bind a channel object to this cache</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"defaultvalue":"channel","description":"<p>namespace of the cache, defaults to <code>channel</code></p>","name":"namespace"},{"type":{"names":["ChannelMapCache"]},"description":"<p>Instantiated ChannelMap class</p>","name":"guildChannelMap"},{"type":{"names":["PermissionOverwriteCache"]},"description":"<p>Instantiated PermissionOverwrite class</p>","name":"permissionOverwrites"},{"type":{"names":["UserCache"]},"description":"<p>Instantiated UserCache class</p>","name":"recipients"}],"name":"ChannelCache","longname":"ChannelCache","kind":"class","scope":"global","undocumented":true,"$longname":"ChannelCache"}},{"comment":"/**\n * Cache for providing a guild/user -> channels map\n * @extends BaseCache\n */","meta":{"range":[137,5116],"filename":"ChannelMapCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000770","name":"ChannelMapCache","type":"ClassDeclaration","paramnames":["storageEngine","boundObject"]}},"classdesc":"<p>Cache for providing a guild/user -&gt; channels map</p>","augments":["BaseCache"],"name":"ChannelMapCache","longname":"ChannelMapCache","kind":"class","scope":"global","description":"<p>Create a new ChannelMapCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["Object"]},"description":"<p>Optional, may be used to bind the map object to the cache</p>","name":"boundObject"}],"$longname":"ChannelMapCache","$members":[{"comment":"/**\n     * Add an id to the index of a namespace\n     * @param {String} id - id to add\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[1685,1814],"filename":"BaseCache.js","lineno":54,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000075","name":"BaseCache#addToIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Add an id to the index of a namespace</p>","params":[{"type":{"names":["String"]},"description":"<p>id to add</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"ChannelMapCache#addToIndex","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"inherits":"BaseCache#addToIndex","inherited":true,"$longname":"ChannelMapCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"ChannelMapCache#bindGuild","kind":"function","memberof":"ChannelMapCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"ChannelMapCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"ChannelMapCache#bindObject","kind":"function","memberof":"ChannelMapCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"ChannelMapCache#bindObject"},{"comment":"/**\n     * Build an id consisting of $namespace.$id\n     * @param {String} id - id to append to namespace\n     * @return {String} - constructed id\n     */","meta":{"range":[1398,1459],"filename":"BaseCache.js","lineno":44,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000061","name":"BaseCache#buildId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Build an id consisting of $namespace.$id</p>","params":[{"type":{"names":["String"]},"description":"<p>id to append to namespace</p>","name":"id"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>constructed id</li>\n</ul>"}],"name":"buildId","longname":"ChannelMapCache#buildId","kind":"function","memberof":"ChannelMapCache","scope":"instance","inherits":"BaseCache#buildId","inherited":true,"$longname":"ChannelMapCache#buildId"},{"comment":"/**\n     * Get a ChannelMap via id of the guild or the user\n     * @param {String} id Id of the user or the guild\n     * @param {String} [type=guild] Type of the map to get\n     * @returns {Promise.<ChannelMapCache|null>}\n     */","meta":{"range":[1050,1491],"filename":"ChannelMapCache.js","lineno":32,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000804","name":"ChannelMapCache#get","type":"MethodDefinition","paramnames":["id","type"]},"vars":{"":null}},"description":"<p>Get a ChannelMap via id of the guild or the user</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the user or the guild</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"guild","description":"<p>Type of the map to get</p>","name":"type"}],"returns":[{"type":{"names":["Promise.<(ChannelMapCache|null)>"]}}],"name":"get","longname":"ChannelMapCache#get","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"$longname":"ChannelMapCache#get"},{"comment":"/**\n     * Get the number of elements that are within an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<Number>}\n     */","meta":{"range":[3408,3535],"filename":"BaseCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000186","name":"BaseCache#getIndexCount","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get the number of elements that are within an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Number>"]}}],"name":"getIndexCount","longname":"ChannelMapCache#getIndexCount","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexCount","inherited":true,"$longname":"ChannelMapCache#getIndexCount"},{"comment":"/**\n     * Get all members from an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<String[]>}\n     */","meta":{"range":[2784,2915],"filename":"BaseCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000144","name":"BaseCache#getIndexMembers","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get all members from an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"ChannelMapCache#getIndexMembers","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexMembers","inherited":true,"$longname":"ChannelMapCache#getIndexMembers"},{"comment":"/**\n     * Check if an id is a member of an index\n     * @param {String} id - id to check\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<boolean>} - returns true if it is a part of the index, false otherwise\n     */","meta":{"range":[2469,2600],"filename":"BaseCache.js","lineno":74,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000121","name":"BaseCache#isIndexed","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Check if an id is a member of an index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to check</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>returns true if it is a part of the index, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"ChannelMapCache#isIndexed","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"inherits":"BaseCache#isIndexed","inherited":true,"$longname":"ChannelMapCache#isIndexed"},{"comment":"/**\n     * Remove a ChannelMap\n     * @param {String} id Id of the user or the guild\n     * @param {String} [type=guild] Type of the map to remove\n     * @returns {Promise.<null>}\n     */","meta":{"range":[2991,3450],"filename":"ChannelMapCache.js","lineno":81,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001007","name":"ChannelMapCache#remove","type":"MethodDefinition","paramnames":["id","type"]},"vars":{"":null}},"description":"<p>Remove a ChannelMap</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the user or the guild</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"guild","description":"<p>Type of the map to remove</p>","name":"type"}],"returns":[{"type":{"names":["Promise.<null>"]}}],"name":"remove","longname":"ChannelMapCache#remove","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"$longname":"ChannelMapCache#remove"},{"comment":"/**\n     * Remove an id from the index\n     * @param {String} id - id to be removed\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[2037,2176],"filename":"BaseCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000098","name":"BaseCache#removeFromIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Remove an id from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to be removed</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"ChannelMapCache#removeFromIndex","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"inherits":"BaseCache#removeFromIndex","inherited":true,"$longname":"ChannelMapCache#removeFromIndex"},{"comment":"/**\n     * Delete an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[3081,3204],"filename":"BaseCache.js","lineno":92,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000165","name":"BaseCache#removeIndex","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Delete an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"ChannelMapCache#removeIndex","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"inherits":"BaseCache#removeIndex","inherited":true,"$longname":"ChannelMapCache#removeIndex"},{"comment":"/**\n     * Upsert a ChannelMap\n     * @param {String} id Id of the user or the guild\n     * @param {String[]} data Array of channel ids\n     * @param {String} [type=guild] Type of the map to upsert\n     * @param {Boolean} [remove=false] Remove old channels that don't exist anymore\n     * @returns {Promise.<ChannelMapCache>}\n     */","meta":{"range":[1835,2793],"filename":"ChannelMapCache.js","lineno":53,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000864","name":"ChannelMapCache#update","type":"MethodDefinition","paramnames":["id","data","type","remove"]},"vars":{"":null}},"description":"<p>Upsert a ChannelMap</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the user or the guild</p>","name":"id"},{"type":{"names":["Array.<String>"]},"description":"<p>Array of channel ids</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"guild","description":"<p>Type of the map to upsert</p>","name":"type"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"<p>Remove old channels that don't exist anymore</p>","name":"remove"}],"returns":[{"type":{"names":["Promise.<ChannelMapCache>"]}}],"name":"update","longname":"ChannelMapCache#update","kind":"function","memberof":"ChannelMapCache","scope":"instance","async":true,"$longname":"ChannelMapCache#update"}],"$constructor":{"comment":"/**\n     * Create a new ChannelMapCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - storage engine to use for this cache\n     * @param {Object} boundObject - Optional, may be used to bind the map object to the cache\n     * @property {String} namespace=channelmap - namespace of this cache, defaults to `channelmap`\n     */","meta":{"range":[584,810],"filename":"ChannelMapCache.js","lineno":17,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000774","name":"ChannelMapCache","type":"MethodDefinition","paramnames":["storageEngine","boundObject"]},"vars":{"":null}},"description":"<p>Create a new ChannelMapCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["Object"]},"description":"<p>Optional, may be used to bind the map object to the cache</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"defaultvalue":"channelmap","description":"<p>namespace of this cache, defaults to <code>channelmap</code></p>","name":"namespace"}],"name":"ChannelMapCache","longname":"ChannelMapCache","kind":"class","scope":"global","undocumented":true,"$longname":"ChannelMapCache"}},{"comment":"/**\n * @typedef {Object} Emoji - A discord emoji structure\n * @property {String} id - id of the emoji\n * @property {String} name - name of the emoji\n * @property {Array} [roles] - array of roles whitelisted to use the emoji (whitelisted apps only)\n * @property {User} [user] - User that created this emoji\n * @property {Boolean} require_colons - whether this emoji must be wrapped in colons\n * @property {Boolean} managed - whether this emoji is managed\n */","meta":{"filename":"EmojiCache.js","lineno":120,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"Emoji","type":{"names":["Object"]},"description":"<p>A discord emoji structure</p>","properties":[{"type":{"names":["String"]},"description":"<p>id of the emoji</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>name of the emoji</p>","name":"name"},{"type":{"names":["Array"]},"optional":true,"description":"<p>array of roles whitelisted to use the emoji (whitelisted apps only)</p>","name":"roles"},{"type":{"names":["User"]},"optional":true,"description":"<p>User that created this emoji</p>","name":"user"},{"type":{"names":["Boolean"]},"description":"<p>whether this emoji must be wrapped in colons</p>","name":"require_colons"},{"type":{"names":["Boolean"]},"description":"<p>whether this emoji is managed</p>","name":"managed"}],"longname":"Emoji","scope":"global","$longname":"Emoji"},{"comment":"/**\n * Cache responsible for storing emoji related data\n * @property {StorageEngine} storageEngine - storage engine to use for this cache\n * @property {String} namespace=emoji - namespace of the cache\n * @extends BaseCache\n */","meta":{"range":[284,4492],"filename":"EmojiCache.js","lineno":10,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001193","name":"EmojiCache","type":"ClassDeclaration","paramnames":["storageEngine","boundObject"]}},"classdesc":"<p>Cache responsible for storing emoji related data</p>","properties":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["String"]},"defaultvalue":"emoji","description":"<p>namespace of the cache</p>","name":"namespace"}],"augments":["BaseCache"],"name":"EmojiCache","longname":"EmojiCache","kind":"class","scope":"global","description":"<p>Create a new EmojiCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["Emoji"]},"optional":true,"description":"<p>Optional, may be used to bind an emoji object to the cache</p>","name":"boundObject"}],"$longname":"EmojiCache","$members":[{"comment":"/**\n     * Add an id to the index of a namespace\n     * @param {String} id - id to add\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[1685,1814],"filename":"BaseCache.js","lineno":54,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000075","name":"BaseCache#addToIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Add an id to the index of a namespace</p>","params":[{"type":{"names":["String"]},"description":"<p>id to add</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"EmojiCache#addToIndex","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"inherits":"BaseCache#addToIndex","inherited":true,"$longname":"EmojiCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"EmojiCache#bindGuild","kind":"function","memberof":"EmojiCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"EmojiCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"EmojiCache#bindObject","kind":"function","memberof":"EmojiCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"EmojiCache#bindObject"},{"comment":"/**\n     * Build a unique key to store the emoji in the datasource\n     * @param {String} emojiId - id of the emoji (this does not refer to the name of the emoji)\n     * @param {String} guildId - id of the guild this emoji belongs to\n     * @return {String} - prepared key\n     */","meta":{"range":[4322,4490],"filename":"EmojiCache.js","lineno":112,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001487","name":"EmojiCache#buildId","type":"MethodDefinition","paramnames":["emojiId","guildId"]},"vars":{"":null}},"description":"<p>Build a unique key to store the emoji in the datasource</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the emoji (this does not refer to the name of the emoji)</p>","name":"emojiId"},{"type":{"names":["String"]},"description":"<p>id of the guild this emoji belongs to</p>","name":"guildId"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>prepared key</li>\n</ul>"}],"name":"buildId","longname":"EmojiCache#buildId","kind":"function","memberof":"EmojiCache","scope":"instance","overrides":"BaseCache#buildId","$longname":"EmojiCache#buildId"},{"comment":"/**\n     * Filter for emojis by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for the filtering\n     * @param {String} guildId - id of the guild the emojis searched belong to\n     * @param ids\n     * @return {Promise.<EmojiCache[]>} - array of bound emoji caches\n     */","meta":{"range":[3297,3518],"filename":"EmojiCache.js","lineno":89,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001407","name":"EmojiCache#filter","type":"MethodDefinition","paramnames":["fn","guildId","ids"]},"vars":{"":null}},"description":"<p>Filter for emojis by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for the filtering</p>","name":"fn"},{"type":{"names":["String"]},"description":"<p>id of the guild the emojis searched belong to</p>","name":"guildId"},{"name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<Array.<EmojiCache>>"]},"description":"<ul>\n<li>array of bound emoji caches</li>\n</ul>"}],"name":"filter","longname":"EmojiCache#filter","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"$longname":"EmojiCache#filter"},{"comment":"/**\n     * Find an emoji by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for filtering for a single emoji\n     * @param guildId\n     * @param ids\n     * @return {Promise.<EmojiCache>} - bound emoji cache\n     */","meta":{"range":[3828,4031],"filename":"EmojiCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001450","name":"EmojiCache#find","type":"MethodDefinition","paramnames":["fn","guildId","ids"]},"vars":{"":null}},"description":"<p>Find an emoji by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for filtering for a single emoji</p>","name":"fn"},{"name":"guildId"},{"name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<EmojiCache>"]},"description":"<ul>\n<li>bound emoji cache</li>\n</ul>"}],"name":"find","longname":"EmojiCache#find","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"$longname":"EmojiCache#find"},{"comment":"/**\n     * Get an emoji via id\n     * @param {String} id - id of the emoji (this does not refer to the name of the emoji)\n     * @param {String} guildId - id of the guild this emoji belongs to\n     * @return {Promise.<EmojiCache|null>} EmojiCache with bound object or null if nothing was found\n     */","meta":{"range":[1157,1496],"filename":"EmojiCache.js","lineno":33,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001227","name":"EmojiCache#get","type":"MethodDefinition","paramnames":["id","guildId"]},"vars":{"":null}},"description":"<p>Get an emoji via id</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the emoji (this does not refer to the name of the emoji)</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>id of the guild this emoji belongs to</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<(EmojiCache|null)>"]},"description":"<p>EmojiCache with bound object or null if nothing was found</p>"}],"name":"get","longname":"EmojiCache#get","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"$longname":"EmojiCache#get"},{"comment":"/**\n     * Get the number of elements that are within an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<Number>}\n     */","meta":{"range":[3408,3535],"filename":"BaseCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000186","name":"BaseCache#getIndexCount","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get the number of elements that are within an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Number>"]}}],"name":"getIndexCount","longname":"EmojiCache#getIndexCount","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexCount","inherited":true,"$longname":"EmojiCache#getIndexCount"},{"comment":"/**\n     * Get all members from an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<String[]>}\n     */","meta":{"range":[2784,2915],"filename":"BaseCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000144","name":"BaseCache#getIndexMembers","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get all members from an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"EmojiCache#getIndexMembers","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexMembers","inherited":true,"$longname":"EmojiCache#getIndexMembers"},{"comment":"/**\n     * Check if an id is a member of an index\n     * @param {String} id - id to check\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<boolean>} - returns true if it is a part of the index, false otherwise\n     */","meta":{"range":[2469,2600],"filename":"BaseCache.js","lineno":74,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000121","name":"BaseCache#isIndexed","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Check if an id is a member of an index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to check</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>returns true if it is a part of the index, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"EmojiCache#isIndexed","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"inherits":"BaseCache#isIndexed","inherited":true,"$longname":"EmojiCache#isIndexed"},{"comment":"/**\n     * Remove an emoji from the cache\n     * @param {String} id - id of the emoji (this does not refer to the name of the emoji)\n     * @param {String} guildId - id of the guild this emoji belongs to\n     * @return {Promise.<void>}\n     */","meta":{"range":[2498,2929],"filename":"EmojiCache.js","lineno":69,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001338","name":"EmojiCache#remove","type":"MethodDefinition","paramnames":["id","guildId"]},"vars":{"":null}},"description":"<p>Remove an emoji from the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the emoji (this does not refer to the name of the emoji)</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>id of the guild this emoji belongs to</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"EmojiCache#remove","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"$longname":"EmojiCache#remove"},{"comment":"/**\n     * Remove an id from the index\n     * @param {String} id - id to be removed\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[2037,2176],"filename":"BaseCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000098","name":"BaseCache#removeFromIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Remove an id from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to be removed</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"EmojiCache#removeFromIndex","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"inherits":"BaseCache#removeFromIndex","inherited":true,"$longname":"EmojiCache#removeFromIndex"},{"comment":"/**\n     * Delete an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[3081,3204],"filename":"BaseCache.js","lineno":92,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000165","name":"BaseCache#removeIndex","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Delete an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"EmojiCache#removeIndex","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"inherits":"BaseCache#removeIndex","inherited":true,"$longname":"EmojiCache#removeIndex"},{"comment":"/**\n     * Update a emoji\n     * @param {String} id - id of the emoji (this does not refer to the name of the emoji)\n     * @param {String} guildId - id of the guild this emoji belongs to\n     * @param {Emoji} data - new data of the emoji, that will get merged with the old data\n     * @return {Promise.<EmojiCache>} - returns a bound EmojiCache\n     */","meta":{"range":[1860,2244],"filename":"EmojiCache.js","lineno":52,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001275","name":"EmojiCache#update","type":"MethodDefinition","paramnames":["id","guildId","data"]},"vars":{"":null}},"description":"<p>Update a emoji</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the emoji (this does not refer to the name of the emoji)</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>id of the guild this emoji belongs to</p>","name":"guildId"},{"type":{"names":["Emoji"]},"description":"<p>new data of the emoji, that will get merged with the old data</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<EmojiCache>"]},"description":"<ul>\n<li>returns a bound EmojiCache</li>\n</ul>"}],"name":"update","longname":"EmojiCache#update","kind":"function","memberof":"EmojiCache","scope":"instance","async":true,"$longname":"EmojiCache#update"}],"$constructor":{"comment":"/**\n     * Create a new EmojiCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - storage engine to use for this cache\n     * @param {Emoji} [boundObject] - Optional, may be used to bind an emoji object to the cache\n     */","meta":{"range":[624,845],"filename":"EmojiCache.js","lineno":18,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001197","name":"EmojiCache","type":"MethodDefinition","paramnames":["storageEngine","boundObject"]},"vars":{"":null}},"description":"<p>Create a new EmojiCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["Emoji"]},"optional":true,"description":"<p>Optional, may be used to bind an emoji object to the cache</p>","name":"boundObject"}],"name":"EmojiCache","longname":"EmojiCache","kind":"class","scope":"global","undocumented":true,"$longname":"EmojiCache"}},{"comment":"/**\n     *\n     * @param options\n     */","meta":{"range":[244,1073],"filename":"EventProcessor.js","lineno":14,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src","code":{"id":"astnode100004435","name":"EventProcessor","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"params":[{"name":"options"}],"name":"EventProcessor","longname":"EventProcessor","kind":"class","scope":"global","$longname":"EventProcessor"},{"comment":"/**\n * @typedef {Object} Game - A discord game object\n * @property {String} name - name of the game\n * @property {Number} type - type of the game, checkout [activity types](https://discordapp.com/developers/docs/topics/gateway#game-object-activity-types) for more info\n * @property {String} ?url - stream url, only present with a type value of 1\n */","meta":{"filename":"PresenceCache.js","lineno":100,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"Game","type":{"names":["Object"]},"description":"<p>A discord game object</p>","properties":[{"type":{"names":["String"]},"description":"<p>name of the game</p>","name":"name"},{"type":{"names":["Number"]},"description":"<p>type of the game, checkout <a href=\"https://discordapp.com/developers/docs/topics/gateway#game-object-activity-types\">activity types</a> for more info</p>","name":"type"},{"type":{"names":["String"]},"description":"<p>stream url, only present with a type value of 1</p>","name":"?url"}],"longname":"Game","scope":"global","$longname":"Game"},{"comment":"/**\n * @typedef {Object} Guild - Object describing a regular discord guild\n * @property {String} id - guild id\n * @property {String} name - guild name\n * @property {String} icon - icon hash\n * @property {String} splash - splash image hash\n * @property {String} owner_id - id of the owner\n * @property {String} region - id of the voice region\n * @property {String} afk_channel_id - id of the afk channel\n * @property {Number} afk_timeout - afk timeout in seconds\n * @property {Boolean} embed_enabled - if the guild is embeddable\n * @property {String} embed_channel_id - id of embedded channel\n * @property {Number} verification level - [verification level](https://discordapp.com/developers/docs/resources/guild#guild-object-verification-level) of the guild\n * @property {Number} default_message_notifications - default\n * [notification level](https://discordapp.com/developers/docs/resources/guild#guild-object-default-message-notification-level) of the guild\n * @property {Number} explicit_content_filter - default [filter level](https://discordapp.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level)\n * @property {Role[]} roles - Array of roles\n * @property {Emoji[]} emojis - Array of emojis\n * @property {String[]} features - Array of enabled guild features\n * @property {Number} mfa_level - required [mfa level](https://discordapp.com/developers/docs/resources/guild#guild-object-mfa-level) for the guild\n * @property {String} [application_id] - application id of the guild creator, if the guild was created by a bot\n * @property {Boolean} widget_enabled - if the server widget is enabled\n * @property {String} widget_channel_id - channel id of the server widget\n */","meta":{"filename":"GuildCache.js","lineno":238,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"Guild","type":{"names":["Object"]},"description":"<p>Object describing a regular discord guild</p>","properties":[{"type":{"names":["String"]},"description":"<p>guild id</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>guild name</p>","name":"name"},{"type":{"names":["String"]},"description":"<p>icon hash</p>","name":"icon"},{"type":{"names":["String"]},"description":"<p>splash image hash</p>","name":"splash"},{"type":{"names":["String"]},"description":"<p>id of the owner</p>","name":"owner_id"},{"type":{"names":["String"]},"description":"<p>id of the voice region</p>","name":"region"},{"type":{"names":["String"]},"description":"<p>id of the afk channel</p>","name":"afk_channel_id"},{"type":{"names":["Number"]},"description":"<p>afk timeout in seconds</p>","name":"afk_timeout"},{"type":{"names":["Boolean"]},"description":"<p>if the guild is embeddable</p>","name":"embed_enabled"},{"type":{"names":["String"]},"description":"<p>id of embedded channel</p>","name":"embed_channel_id"},{"type":{"names":["Number"]},"description":"<p>level - <a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object-verification-level\">verification level</a> of the guild</p>","name":"verification"},{"type":{"names":["Number"]},"description":"<p>default\n<a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object-default-message-notification-level\">notification level</a> of the guild</p>","name":"default_message_notifications"},{"type":{"names":["Number"]},"description":"<p>default <a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level\">filter level</a></p>","name":"explicit_content_filter"},{"type":{"names":["Array.<Role>"]},"description":"<p>Array of roles</p>","name":"roles"},{"type":{"names":["Array.<Emoji>"]},"description":"<p>Array of emojis</p>","name":"emojis"},{"type":{"names":["Array.<String>"]},"description":"<p>Array of enabled guild features</p>","name":"features"},{"type":{"names":["Number"]},"description":"<p>required <a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object-mfa-level\">mfa level</a> for the guild</p>","name":"mfa_level"},{"type":{"names":["String"]},"optional":true,"description":"<p>application id of the guild creator, if the guild was created by a bot</p>","name":"application_id"},{"type":{"names":["Boolean"]},"description":"<p>if the server widget is enabled</p>","name":"widget_enabled"},{"type":{"names":["String"]},"description":"<p>channel id of the server widget</p>","name":"widget_channel_id"}],"longname":"Guild","scope":"global","$longname":"Guild"},{"comment":"/**\n * Cache responsible for guilds\n * @extends BaseCache\n */","meta":{"range":[119,9919],"filename":"GuildCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001530","name":"GuildCache","type":"ClassDeclaration","paramnames":["storageEngine","channelCache","roleCache","memberCache","emojiCache","presenceCache","guildToChannelCache","boundObject"]}},"classdesc":"<p>Cache responsible for guilds</p>","augments":["BaseCache"],"name":"GuildCache","longname":"GuildCache","kind":"class","scope":"global","description":"<p>Create a new GuildCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["ChannelCache"]},"description":"<p>Instantiated ChannelCache class</p>","name":"channelCache"},{"type":{"names":["RoleCache"]},"description":"<p>Instantiated RoleCache class</p>","name":"roleCache"},{"type":{"names":["MemberCache"]},"description":"<p>Instantiated MemberCache class</p>","name":"memberCache"},{"type":{"names":["EmojiCache"]},"description":"<p>Instantiated EmojiCache class</p>","name":"emojiCache"},{"type":{"names":["PresenceCache"]},"description":"<p>Instantiated PresenceCache class</p>","name":"presenceCache"},{"type":{"names":["ChannelMapCache"]},"description":"<p>Instantiated ChannelMap class</p>","name":"guildToChannelCache"},{"type":{"names":["Guild"]},"description":"<p>Optional, may be used to bind a guild object to the cache</p>","name":"boundObject"}],"$longname":"GuildCache","$members":[{"comment":"/**\n     * Add a guild to the guild index\n     * @param {String} id - id of the guild\n     * @returns {Promise.<void>}\n     */","meta":{"range":[8604,8697],"filename":"GuildCache.js","lineno":191,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002463","name":"GuildCache#addToIndex","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Add a guild to the guild index</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"GuildCache#addToIndex","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"overrides":"BaseCache#addToIndex","$longname":"GuildCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"GuildCache#bindGuild","kind":"function","memberof":"GuildCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"GuildCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"GuildCache#bindObject","kind":"function","memberof":"GuildCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"GuildCache#bindObject"},{"comment":"/**\n     * Build an id consisting of $namespace.$id\n     * @param {String} id - id to append to namespace\n     * @return {String} - constructed id\n     */","meta":{"range":[1398,1459],"filename":"BaseCache.js","lineno":44,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000061","name":"BaseCache#buildId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Build an id consisting of $namespace.$id</p>","params":[{"type":{"names":["String"]},"description":"<p>id to append to namespace</p>","name":"id"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>constructed id</li>\n</ul>"}],"name":"buildId","longname":"GuildCache#buildId","kind":"function","memberof":"GuildCache","scope":"instance","inherits":"BaseCache#buildId","inherited":true,"$longname":"GuildCache#buildId"},{"comment":"/**\n     * Filter through the collection of guilds\n     * @param {Function} fn - Filter function\n     * @returns {Promise.<GuildCache[]>} - array of bound guild caches\n     */","meta":{"range":[7552,7893],"filename":"GuildCache.js","lineno":171,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002303","name":"GuildCache#filter","type":"MethodDefinition","paramnames":["fn"]},"vars":{"":null}},"description":"<p>Filter through the collection of guilds</p>","params":[{"type":{"names":["function"]},"description":"<p>Filter function</p>","name":"fn"}],"returns":[{"type":{"names":["Promise.<Array.<GuildCache>>"]},"description":"<ul>\n<li>array of bound guild caches</li>\n</ul>"}],"name":"filter","longname":"GuildCache#filter","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"$longname":"GuildCache#filter"},{"comment":"/**\n     * Filter through the collection of guilds and return the first match\n     * @param {Function} fn - Filter function\n     * @returns {Promise.<GuildCache>} - returns a bound guild cache\n     */","meta":{"range":[8104,8467],"filename":"GuildCache.js","lineno":181,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002383","name":"GuildCache#find","type":"MethodDefinition","paramnames":["fn"]},"vars":{"":null}},"description":"<p>Filter through the collection of guilds and return the first match</p>","params":[{"type":{"names":["function"]},"description":"<p>Filter function</p>","name":"fn"}],"returns":[{"type":{"names":["Promise.<GuildCache>"]},"description":"<ul>\n<li>returns a bound guild cache</li>\n</ul>"}],"name":"find","longname":"GuildCache#find","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"$longname":"GuildCache#find"},{"comment":"/**\n     * Retrieves a guild via id\n     * @param id - Discord id of the guild\n     * @returns {Promise.<GuildCache|null>} Returns either a Guild Object or null if the guild does not exist.\n     */","meta":{"range":[2183,2698],"filename":"GuildCache.js","lineno":49,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001606","name":"GuildCache#get","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Retrieves a guild via id</p>","params":[{"description":"<p>Discord id of the guild</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<(GuildCache|null)>"]},"description":"<p>Returns either a Guild Object or null if the guild does not exist.</p>"}],"name":"get","longname":"GuildCache#get","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"$longname":"GuildCache#get"},{"comment":"/**\n     * Get the number of guilds that are currently cached\n     * @return {Promise.<Number>} - Number of guilds currently cached\n     */","meta":{"range":[9824,9917],"filename":"GuildCache.js","lineno":233,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002539","name":"GuildCache#getIndexCount","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get the number of guilds that are currently cached</p>","returns":[{"type":{"names":["Promise.<Number>"]},"description":"<ul>\n<li>Number of guilds currently cached</li>\n</ul>"}],"name":"getIndexCount","longname":"GuildCache#getIndexCount","kind":"function","memberof":"GuildCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#getIndexCount","$longname":"GuildCache#getIndexCount"},{"comment":"/**\n     * Get all guild ids currently indexed\n     * @returns {Promise.<String[]>} - array of guild ids\n     */","meta":{"range":[9358,9455],"filename":"GuildCache.js","lineno":217,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002511","name":"GuildCache#getIndexMembers","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get all guild ids currently indexed</p>","returns":[{"type":{"names":["Promise.<Array.<String>>"]},"description":"<ul>\n<li>array of guild ids</li>\n</ul>"}],"name":"getIndexMembers","longname":"GuildCache#getIndexMembers","kind":"function","memberof":"GuildCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#getIndexMembers","$longname":"GuildCache#getIndexMembers"},{"comment":"/**\n     * Check if a guild is indexed alias cached\n     * @param {String} id - id of the guild\n     * @returns {Promise.<Boolean>} - True if this guild is cached and false if not\n     */","meta":{"range":[9140,9235],"filename":"GuildCache.js","lineno":209,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002495","name":"GuildCache#isIndexed","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Check if a guild is indexed alias cached</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<Boolean>"]},"description":"<ul>\n<li>True if this guild is cached and false if not</li>\n</ul>"}],"name":"isIndexed","longname":"GuildCache#isIndexed","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"overrides":"BaseCache#isIndexed","$longname":"GuildCache#isIndexed"},{"comment":"/**\n     * Removes a guild and associated elements from the cache.\n     * @param {String} id - id of the guild to remove\n     * @returns {Promise.<void>}\n     */","meta":{"range":[6247,7366],"filename":"GuildCache.js","lineno":136,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002125","name":"GuildCache#remove","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Removes a guild and associated elements from the cache.</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild to remove</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"GuildCache#remove","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"$longname":"GuildCache#remove"},{"comment":"/**\n     * Remove a guild from the guild index\n     * @param {String} id - id of the guild\n     * @returns {Promise.<void>}\n     */","meta":{"range":[8839,8942],"filename":"GuildCache.js","lineno":200,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002479","name":"GuildCache#removeFromIndex","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Remove a guild from the guild index</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"GuildCache#removeFromIndex","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"overrides":"BaseCache#removeFromIndex","$longname":"GuildCache#removeFromIndex"},{"comment":"/**\n     * Remove the guild index, you should probably not call this at all :<\n     * @returns {Promise.<void>}\n     */","meta":{"range":[9585,9674],"filename":"GuildCache.js","lineno":225,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002525","name":"GuildCache#removeIndex","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Remove the guild index, you should probably not call this at all :&lt;</p>","returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"GuildCache#removeIndex","kind":"function","memberof":"GuildCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#removeIndex","$longname":"GuildCache#removeIndex"},{"comment":"/**\n     * Upsert a guild object\n     * @param {String} id - id of the guild\n     * @param {Object} data - data received from the event\n     * @param {?Channel[]} data.channels - Array of channels\n     * @param {?Array} data.members - Array of members\n     * @param {?Array} data.presences - Array of presences\n     * @param {?Role[]} data.roles - Array of roles\n     * @param {?Emoji[]} data.emojis - Array of emojis\n     * @returns {Promise.<GuildCache>} - returns a bound guild cache\n     */","meta":{"range":[3203,6075],"filename":"GuildCache.js","lineno":72,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001702","name":"GuildCache#update","type":"MethodDefinition","paramnames":["id","data"]},"vars":{"":null}},"description":"<p>Upsert a guild object</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild</p>","name":"id"},{"type":{"names":["Object"]},"description":"<p>data received from the event</p>","name":"data"},{"type":{"names":["Array.<Channel>"]},"nullable":true,"description":"<p>Array of channels</p>","name":"data.channels"},{"type":{"names":["Array"]},"nullable":true,"description":"<p>Array of members</p>","name":"data.members"},{"type":{"names":["Array"]},"nullable":true,"description":"<p>Array of presences</p>","name":"data.presences"},{"type":{"names":["Array.<Role>"]},"nullable":true,"description":"<p>Array of roles</p>","name":"data.roles"},{"type":{"names":["Array.<Emoji>"]},"nullable":true,"description":"<p>Array of emojis</p>","name":"data.emojis"}],"returns":[{"type":{"names":["Promise.<GuildCache>"]},"description":"<ul>\n<li>returns a bound guild cache</li>\n</ul>"}],"name":"update","longname":"GuildCache#update","kind":"function","memberof":"GuildCache","scope":"instance","async":true,"$longname":"GuildCache#update"}],"$constructor":{"comment":"/**\n     * Create a new GuildCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - Storage engine to use for this cache\n     * @param {ChannelCache} channelCache - Instantiated ChannelCache class\n     * @param {RoleCache} roleCache - Instantiated RoleCache class\n     * @param {MemberCache} memberCache - Instantiated MemberCache class\n     * @param {EmojiCache} emojiCache - Instantiated EmojiCache class\n     * @param {PresenceCache} presenceCache - Instantiated PresenceCache class\n     * @param {ChannelMapCache} guildToChannelCache - Instantiated ChannelMap class\n     * @param {Guild} boundObject - Optional, may be used to bind a guild object to the cache\n     * @property {String} namespace=guild - namespace of the cache, defaults to `guild`\n     * @property {ChannelCache} channels - Instantiated ChannelCache class\n     * @property {RoleCache} roles - Instantiated RoleCache class\n     * @property {MemberCache} members - Instantiated MemberCache class\n     * @property {EmojiCache} emojis - Instantiated EmojiCache class\n     * @property {PresenceCache} presences - Instantiated PresenceCache class\n     * @property {ChannelMapCache} guildChannelMap - Instantiated ChannelMap class\n     */","meta":{"range":[1436,1975],"filename":"GuildCache.js","lineno":29,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100001534","name":"GuildCache","type":"MethodDefinition","paramnames":["storageEngine","channelCache","roleCache","memberCache","emojiCache","presenceCache","guildToChannelCache","boundObject"]},"vars":{"":null}},"description":"<p>Create a new GuildCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["ChannelCache"]},"description":"<p>Instantiated ChannelCache class</p>","name":"channelCache"},{"type":{"names":["RoleCache"]},"description":"<p>Instantiated RoleCache class</p>","name":"roleCache"},{"type":{"names":["MemberCache"]},"description":"<p>Instantiated MemberCache class</p>","name":"memberCache"},{"type":{"names":["EmojiCache"]},"description":"<p>Instantiated EmojiCache class</p>","name":"emojiCache"},{"type":{"names":["PresenceCache"]},"description":"<p>Instantiated PresenceCache class</p>","name":"presenceCache"},{"type":{"names":["ChannelMapCache"]},"description":"<p>Instantiated ChannelMap class</p>","name":"guildToChannelCache"},{"type":{"names":["Guild"]},"description":"<p>Optional, may be used to bind a guild object to the cache</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"defaultvalue":"guild","description":"<p>namespace of the cache, defaults to <code>guild</code></p>","name":"namespace"},{"type":{"names":["ChannelCache"]},"description":"<p>Instantiated ChannelCache class</p>","name":"channels"},{"type":{"names":["RoleCache"]},"description":"<p>Instantiated RoleCache class</p>","name":"roles"},{"type":{"names":["MemberCache"]},"description":"<p>Instantiated MemberCache class</p>","name":"members"},{"type":{"names":["EmojiCache"]},"description":"<p>Instantiated EmojiCache class</p>","name":"emojis"},{"type":{"names":["PresenceCache"]},"description":"<p>Instantiated PresenceCache class</p>","name":"presences"},{"type":{"names":["ChannelMapCache"]},"description":"<p>Instantiated ChannelMap class</p>","name":"guildChannelMap"}],"name":"GuildCache","longname":"GuildCache","kind":"class","scope":"global","undocumented":true,"$longname":"GuildCache"}},{"comment":"/**\n * Cache responsible for storing guild members\n * @extends BaseCache\n */","meta":{"range":[134,4813],"filename":"MemberCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002569","name":"MemberCache","type":"ClassDeclaration","paramnames":["storageEngine","userCache","boundObject"]}},"classdesc":"<p>Cache responsible for storing guild members</p>","augments":["BaseCache"],"name":"MemberCache","longname":"MemberCache","kind":"class","scope":"global","description":"<p>Creates a new MemberCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["Object"]},"description":"<p>storage engine to use</p>","name":"storageEngine"},{"type":{"names":["UserCache"]},"description":"<p>user cache instance</p>","name":"userCache"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Bind an object to this instance</p>","name":"boundObject"}],"$longname":"MemberCache","$members":[{"comment":"/**\n     * Add an id to the index of a namespace\n     * @param {String} id - id to add\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[1685,1814],"filename":"BaseCache.js","lineno":54,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000075","name":"BaseCache#addToIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Add an id to the index of a namespace</p>","params":[{"type":{"names":["String"]},"description":"<p>id to add</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"MemberCache#addToIndex","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"inherits":"BaseCache#addToIndex","inherited":true,"$longname":"MemberCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"MemberCache#bindGuild","kind":"function","memberof":"MemberCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"MemberCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"MemberCache#bindObject","kind":"function","memberof":"MemberCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"MemberCache#bindObject"},{"comment":"/**\n     * Build a unique key for storing member data\n     * @param {String} userId - id of the user belonging to the member\n     * @param {String} guildId - id of the guild the member+\n     * @return {*}\n     */","meta":{"range":[4645,4810],"filename":"MemberCache.js","lineno":128,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002991","name":"MemberCache#buildId","type":"MethodDefinition","paramnames":["userId","guildId"]},"vars":{"":null}},"description":"<p>Build a unique key for storing member data</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the user belonging to the member</p>","name":"userId"},{"type":{"names":["String"]},"description":"<p>id of the guild the member+</p>","name":"guildId"}],"returns":[{"type":{"names":["*"]}}],"name":"buildId","longname":"MemberCache#buildId","kind":"function","memberof":"MemberCache","scope":"instance","overrides":"BaseCache#buildId","$longname":"MemberCache#buildId"},{"comment":"/**\n     * Filter for members by providing filter function which returns true upon success and false otherwise\n     * @param fn\n     * @param guildId\n     * @param ids\n     * @return {Promise.<Array|*|{}>}\n     */","meta":{"range":[3779,4058],"filename":"MemberCache.js","lineno":105,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002887","name":"MemberCache#filter","type":"MethodDefinition","paramnames":["fn","guildId","ids"]},"vars":{"":null}},"description":"<p>Filter for members by providing filter function which returns true upon success and false otherwise</p>","params":[{"name":"fn"},{"name":"guildId"},{"name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<(Array|*|{})>"]}}],"name":"filter","longname":"MemberCache#filter","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"$longname":"MemberCache#filter"},{"comment":"/**\n     * Get a member via id\n     * @param {String} id - id of the member\n     * @param {String} [guildId=this.boundGuild] - id of the guild of the member, defaults to the bound guild of the cache\n     * @returns {Promise.<MemberCache|null>} - bound member cache with properties of the member or null if no member is cached\n     */","meta":{"range":[1348,1704],"filename":"MemberCache.js","lineno":37,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002616","name":"MemberCache#get","type":"MethodDefinition","paramnames":["id","guildId"]},"vars":{"":null}},"description":"<p>Get a member via id</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the member</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the guild of the member, defaults to the bound guild of the cache</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<(MemberCache|null)>"]},"description":"<ul>\n<li>bound member cache with properties of the member or null if no member is cached</li>\n</ul>"}],"name":"get","longname":"MemberCache#get","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"$longname":"MemberCache#get"},{"comment":"/**\n     * Get the number of elements that are within an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<Number>}\n     */","meta":{"range":[3408,3535],"filename":"BaseCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000186","name":"BaseCache#getIndexCount","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get the number of elements that are within an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Number>"]}}],"name":"getIndexCount","longname":"MemberCache#getIndexCount","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexCount","inherited":true,"$longname":"MemberCache#getIndexCount"},{"comment":"/**\n     * Get all members from an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<String[]>}\n     */","meta":{"range":[2784,2915],"filename":"BaseCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000144","name":"BaseCache#getIndexMembers","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get all members from an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"MemberCache#getIndexMembers","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexMembers","inherited":true,"$longname":"MemberCache#getIndexMembers"},{"comment":"/**\n     * Check if an id is a member of an index\n     * @param {String} id - id to check\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<boolean>} - returns true if it is a part of the index, false otherwise\n     */","meta":{"range":[2469,2600],"filename":"BaseCache.js","lineno":74,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000121","name":"BaseCache#isIndexed","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Check if an id is a member of an index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to check</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>returns true if it is a part of the index, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"MemberCache#isIndexed","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"inherits":"BaseCache#isIndexed","inherited":true,"$longname":"MemberCache#isIndexed"},{"comment":"/**\n     * Remove a member from the cache\n     * @param {String} id - id of the member\n     * @param {String} [guildId=this.boundGuild] - id of the guild of the member, defaults to the bound guild of the cache\n     * @return {Promise.<void>}\n     */","meta":{"range":[3104,3555],"filename":"MemberCache.js","lineno":85,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002814","name":"MemberCache#remove","type":"MethodDefinition","paramnames":["id","guildId"]},"vars":{"":null}},"description":"<p>Remove a member from the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the member</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the guild of the member, defaults to the bound guild of the cache</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"MemberCache#remove","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"$longname":"MemberCache#remove"},{"comment":"/**\n     * Remove an id from the index\n     * @param {String} id - id to be removed\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[2037,2176],"filename":"BaseCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000098","name":"BaseCache#removeFromIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Remove an id from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to be removed</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"MemberCache#removeFromIndex","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"inherits":"BaseCache#removeFromIndex","inherited":true,"$longname":"MemberCache#removeFromIndex"},{"comment":"/**\n     * Delete an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[3081,3204],"filename":"BaseCache.js","lineno":92,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000165","name":"BaseCache#removeIndex","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Delete an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"MemberCache#removeIndex","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"inherits":"BaseCache#removeIndex","inherited":true,"$longname":"MemberCache#removeIndex"},{"comment":"/**\n     * Update data of a guild member\n     * @param {String} id - id of the member\n     * @param {String} [guildId=this.boundGuild] - id of the guild of the member, defaults to the bound guild of the cache\n     * @param {GuildMember} data - updated guild member data\n     * @returns {Promise.<MemberCache>}\n     */","meta":{"range":[2032,2844],"filename":"MemberCache.js","lineno":55,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002673","name":"MemberCache#update","type":"MethodDefinition","paramnames":["id","guildId","data"]},"vars":{"":null}},"description":"<p>Update data of a guild member</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the member</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the guild of the member, defaults to the bound guild of the cache</p>","name":"guildId"},{"type":{"names":["GuildMember"]},"description":"<p>updated guild member data</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<MemberCache>"]}}],"name":"update","longname":"MemberCache#update","kind":"function","memberof":"MemberCache","scope":"instance","async":true,"$longname":"MemberCache#update"}],"$constructor":{"comment":"/**\n     * Creates a new MemberCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {Object} storageEngine - storage engine to use\n     * @param {UserCache} userCache - user cache instance\n     * @param {Object} [boundObject] - Bind an object to this instance\n     * @property {String} namespace=member - namespace of this cache, defaults to `member`\n     * @property {UserCache} user - user cache instance\n     * @property {String} boundGuild - id of a guild this cache is bound to\n     */","meta":{"range":[710,1004],"filename":"MemberCache.js","lineno":20,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100002573","name":"MemberCache","type":"MethodDefinition","paramnames":["storageEngine","userCache","boundObject"]},"vars":{"":null}},"description":"<p>Creates a new MemberCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["Object"]},"description":"<p>storage engine to use</p>","name":"storageEngine"},{"type":{"names":["UserCache"]},"description":"<p>user cache instance</p>","name":"userCache"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Bind an object to this instance</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"defaultvalue":"member","description":"<p>namespace of this cache, defaults to <code>member</code></p>","name":"namespace"},{"type":{"names":["UserCache"]},"description":"<p>user cache instance</p>","name":"user"},{"type":{"names":["String"]},"description":"<p>id of a guild this cache is bound to</p>","name":"boundGuild"}],"name":"MemberCache","longname":"MemberCache","kind":"class","scope":"global","undocumented":true,"$longname":"MemberCache"}},{"comment":"/**\n * @typedef {Object} PermissionOverwrite - permission overwrite object, which is used to overwrite permissions on a channel level\n * @property {Number} allow - bitwise value of allowed permissions\n * @property {Number} deny - bitwise value of disallowed permissions\n * @property {String} type - type of the overwrite, either member or role\n */","meta":{"filename":"ChannelCache.js","lineno":198,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"PermissionOverwrite","type":{"names":["Object"]},"description":"<p>permission overwrite object, which is used to overwrite permissions on a channel level</p>","properties":[{"type":{"names":["Number"]},"description":"<p>bitwise value of allowed permissions</p>","name":"allow"},{"type":{"names":["Number"]},"description":"<p>bitwise value of disallowed permissions</p>","name":"deny"},{"type":{"names":["String"]},"description":"<p>type of the overwrite, either member or role</p>","name":"type"}],"longname":"PermissionOverwrite","scope":"global","$longname":"PermissionOverwrite"},{"comment":"/**\n * Cache used for saving overwrites of permissions belonging to channels\n * @extends BaseCache\n */","meta":{"range":[160,5901],"filename":"PermissionOverwriteCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003034","name":"PermissionOverwriteCache","type":"ClassDeclaration","paramnames":["storageEngine","boundObject"]}},"classdesc":"<p>Cache used for saving overwrites of permissions belonging to channels</p>","augments":["BaseCache"],"name":"PermissionOverwriteCache","longname":"PermissionOverwriteCache","kind":"class","scope":"global","description":"<p>Create a new PermissionOverwriteCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["PermissionOverwrite"]},"optional":true,"description":"<p>Optional, may be used to bind a permission overwrite object to this cache</p>","name":"boundObject"}],"$longname":"PermissionOverwriteCache","$members":[{"comment":"/**\n     * Add an id to the index of a namespace\n     * @param {String} id - id to add\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[1685,1814],"filename":"BaseCache.js","lineno":54,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000075","name":"BaseCache#addToIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Add an id to the index of a namespace</p>","params":[{"type":{"names":["String"]},"description":"<p>id to add</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"PermissionOverwriteCache#addToIndex","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"inherits":"BaseCache#addToIndex","inherited":true,"$longname":"PermissionOverwriteCache#addToIndex"},{"comment":"/**\n     * Bind a channel id to this permission overwrite cache\n     * @param {String} channelId - id of the channel that belongs to the permission overwrite\n     * @return {PermissionOverwriteCache} - returns a permission overwrite cache with boundChannel set to the passed channelId\n     */","meta":{"range":[5772,5899],"filename":"PermissionOverwriteCache.js","lineno":124,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003361","name":"PermissionOverwriteCache#bindChannel","type":"MethodDefinition","paramnames":["channelId"]},"vars":{"":null}},"description":"<p>Bind a channel id to this permission overwrite cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the channel that belongs to the permission overwrite</p>","name":"channelId"}],"returns":[{"type":{"names":["PermissionOverwriteCache"]},"description":"<ul>\n<li>returns a permission overwrite cache with boundChannel set to the passed channelId</li>\n</ul>"}],"name":"bindChannel","longname":"PermissionOverwriteCache#bindChannel","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","$longname":"PermissionOverwriteCache#bindChannel"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"PermissionOverwriteCache#bindGuild","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"PermissionOverwriteCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"PermissionOverwriteCache#bindObject","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"PermissionOverwriteCache#bindObject"},{"comment":"/**\n     * Build a unique key for storing the data in the datasource\n     * @param {String} permissionId - id of the permission overwrite\n     * @param {String} channelId=this.boundChannel - id of the channel that belongs to the permission overwrite\n     * @return {String} - id for saving the permission overwrite\n     */","meta":{"range":[5280,5469],"filename":"PermissionOverwriteCache.js","lineno":112,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003334","name":"PermissionOverwriteCache#buildId","type":"MethodDefinition","paramnames":["permissionId","channelId"]},"vars":{"":null}},"description":"<p>Build a unique key for storing the data in the datasource</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the permission overwrite</p>","name":"permissionId"},{"type":{"names":["String"]},"defaultvalue":"this.boundChannel","description":"<p>id of the channel that belongs to the permission overwrite</p>","name":"channelId"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>id for saving the permission overwrite</li>\n</ul>"}],"name":"buildId","longname":"PermissionOverwriteCache#buildId","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","overrides":"BaseCache#buildId","$longname":"PermissionOverwriteCache#buildId"},{"comment":"/**\n     * Filter for permission overwrites by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for the filtering\n     * @param {String} channelId=this.boundChannel - id of the channel that belongs to the permission overwrite\n     * @param {String[]} ids - Array of permission overwrite ids, if omitted the permission overwrite index will be used\n     * @return {Promise.<PermissionOverwriteCache[]>} - returns an array of bound permission overwrite caches\n     */","meta":{"range":[3886,4155],"filename":"PermissionOverwriteCache.js","lineno":89,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003254","name":"PermissionOverwriteCache#filter","type":"MethodDefinition","paramnames":["fn","channelId","ids"]},"vars":{"":null}},"description":"<p>Filter for permission overwrites by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for the filtering</p>","name":"fn"},{"type":{"names":["String"]},"defaultvalue":"this.boundChannel","description":"<p>id of the channel that belongs to the permission overwrite</p>","name":"channelId"},{"type":{"names":["Array.<String>"]},"description":"<p>Array of permission overwrite ids, if omitted the permission overwrite index will be used</p>","name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<Array.<PermissionOverwriteCache>>"]},"description":"<ul>\n<li>returns an array of bound permission overwrite caches</li>\n</ul>"}],"name":"filter","longname":"PermissionOverwriteCache#filter","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"$longname":"PermissionOverwriteCache#filter"},{"comment":"/**\n     * Find a permission overwrite by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for the filtering\n     * @param {String} channelId=this.boundChannel - id of the channel that belongs to the permission overwrite\n     * @param {String[]} ids - Array of permission overwrite ids, if omitted the permission overwrite index will be used\n     * @return {Promise.<PermissionOverwriteCache>} - returns a bound permission overwrite cache\n     */","meta":{"range":[4696,4947],"filename":"PermissionOverwriteCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003297","name":"PermissionOverwriteCache#find","type":"MethodDefinition","paramnames":["fn","channelId","ids"]},"vars":{"":null}},"description":"<p>Find a permission overwrite by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for the filtering</p>","name":"fn"},{"type":{"names":["String"]},"defaultvalue":"this.boundChannel","description":"<p>id of the channel that belongs to the permission overwrite</p>","name":"channelId"},{"type":{"names":["Array.<String>"]},"description":"<p>Array of permission overwrite ids, if omitted the permission overwrite index will be used</p>","name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<PermissionOverwriteCache>"]},"description":"<ul>\n<li>returns a bound permission overwrite cache</li>\n</ul>"}],"name":"find","longname":"PermissionOverwriteCache#find","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"$longname":"PermissionOverwriteCache#find"},{"comment":"/**\n     * Get a permission overwrite via id\n     * @param {String} id - id of the permission overwrite\n     * @param {String} channelId=this.boundChannel - id of the channel that belongs to the permission overwrite\n     * @return {Promise.<PermissionOverwriteCache|null>} - returns a bound permission overwrite cache or null if nothing was found\n     */","meta":{"range":[1305,1706],"filename":"PermissionOverwriteCache.js","lineno":33,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003074","name":"PermissionOverwriteCache#get","type":"MethodDefinition","paramnames":["id","channelId"]},"vars":{"":null}},"description":"<p>Get a permission overwrite via id</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the permission overwrite</p>","name":"id"},{"type":{"names":["String"]},"defaultvalue":"this.boundChannel","description":"<p>id of the channel that belongs to the permission overwrite</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<(PermissionOverwriteCache|null)>"]},"description":"<ul>\n<li>returns a bound permission overwrite cache or null if nothing was found</li>\n</ul>"}],"name":"get","longname":"PermissionOverwriteCache#get","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"$longname":"PermissionOverwriteCache#get"},{"comment":"/**\n     * Get the number of elements that are within an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<Number>}\n     */","meta":{"range":[3408,3535],"filename":"BaseCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000186","name":"BaseCache#getIndexCount","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get the number of elements that are within an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Number>"]}}],"name":"getIndexCount","longname":"PermissionOverwriteCache#getIndexCount","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexCount","inherited":true,"$longname":"PermissionOverwriteCache#getIndexCount"},{"comment":"/**\n     * Get all members from an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<String[]>}\n     */","meta":{"range":[2784,2915],"filename":"BaseCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000144","name":"BaseCache#getIndexMembers","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get all members from an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"PermissionOverwriteCache#getIndexMembers","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexMembers","inherited":true,"$longname":"PermissionOverwriteCache#getIndexMembers"},{"comment":"/**\n     * Check if an id is a member of an index\n     * @param {String} id - id to check\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<boolean>} - returns true if it is a part of the index, false otherwise\n     */","meta":{"range":[2469,2600],"filename":"BaseCache.js","lineno":74,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000121","name":"BaseCache#isIndexed","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Check if an id is a member of an index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to check</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>returns true if it is a part of the index, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"PermissionOverwriteCache#isIndexed","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"inherits":"BaseCache#isIndexed","inherited":true,"$longname":"PermissionOverwriteCache#isIndexed"},{"comment":"/**\n     * Remove a permission overwrite entry from the cache\n     * @param {String} id - id of the permission overwrite\n     * @param {String} channelId=this.boundChannel - id of the channel that belongs to the permission overwrite\n     * @return {Promise.<void>}\n     */","meta":{"range":[2855,3327],"filename":"PermissionOverwriteCache.js","lineno":69,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003185","name":"PermissionOverwriteCache#remove","type":"MethodDefinition","paramnames":["id","channelId"]},"vars":{"":null}},"description":"<p>Remove a permission overwrite entry from the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the permission overwrite</p>","name":"id"},{"type":{"names":["String"]},"defaultvalue":"this.boundChannel","description":"<p>id of the channel that belongs to the permission overwrite</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"PermissionOverwriteCache#remove","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"$longname":"PermissionOverwriteCache#remove"},{"comment":"/**\n     * Remove an id from the index\n     * @param {String} id - id to be removed\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[2037,2176],"filename":"BaseCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000098","name":"BaseCache#removeFromIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Remove an id from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to be removed</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"PermissionOverwriteCache#removeFromIndex","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"inherits":"BaseCache#removeFromIndex","inherited":true,"$longname":"PermissionOverwriteCache#removeFromIndex"},{"comment":"/**\n     * Delete an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[3081,3204],"filename":"BaseCache.js","lineno":92,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000165","name":"BaseCache#removeIndex","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Delete an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"PermissionOverwriteCache#removeIndex","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"inherits":"BaseCache#removeIndex","inherited":true,"$longname":"PermissionOverwriteCache#removeIndex"},{"comment":"/**\n     * Update a permission overwrite entry in the cache\n     * @param {String} id - id of the permission overwrite\n     * @param {String} channelId=this.boundChannel - id of the channel that belongs to the permission overwrite\n     * @param {PermissionOverwrite} data - updated permission overwrite data, will be merged with the old data\n     * @return {Promise.<PermissionOverwriteCache>} - returns a bound permission overwrite cache\n     */","meta":{"range":[2163,2572],"filename":"PermissionOverwriteCache.js","lineno":52,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003122","name":"PermissionOverwriteCache#update","type":"MethodDefinition","paramnames":["id","channelId","data"]},"vars":{"":null}},"description":"<p>Update a permission overwrite entry in the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the permission overwrite</p>","name":"id"},{"type":{"names":["String"]},"defaultvalue":"this.boundChannel","description":"<p>id of the channel that belongs to the permission overwrite</p>","name":"channelId"},{"type":{"names":["PermissionOverwrite"]},"description":"<p>updated permission overwrite data, will be merged with the old data</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<PermissionOverwriteCache>"]},"description":"<ul>\n<li>returns a bound permission overwrite cache</li>\n</ul>"}],"name":"update","longname":"PermissionOverwriteCache#update","kind":"function","memberof":"PermissionOverwriteCache","scope":"instance","async":true,"$longname":"PermissionOverwriteCache#update"}],"$constructor":{"comment":"/**\n     * Create a new PermissionOverwriteCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - Storage engine to use for this cache\n     * @param {PermissionOverwrite} [boundObject] - Optional, may be used to bind a permission overwrite object to this cache\n     * @property {String} namespace=permissionoverwrite - namespace of the cache, defaults to `permissionoverwrite`\n     */","meta":{"range":[673,940],"filename":"PermissionOverwriteCache.js","lineno":17,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003038","name":"PermissionOverwriteCache","type":"MethodDefinition","paramnames":["storageEngine","boundObject"]},"vars":{"":null}},"description":"<p>Create a new PermissionOverwriteCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["PermissionOverwrite"]},"optional":true,"description":"<p>Optional, may be used to bind a permission overwrite object to this cache</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"defaultvalue":"permissionoverwrite","description":"<p>namespace of the cache, defaults to <code>permissionoverwrite</code></p>","name":"namespace"}],"name":"PermissionOverwriteCache","longname":"PermissionOverwriteCache","kind":"class","scope":"global","undocumented":true,"$longname":"PermissionOverwriteCache"}},{"comment":"/**\n * @typedef {Object} Presence - A discord presence object\n * @property {User} user - the user which presence is being updated\n * @property {String[]} roles - array of role ids that belong to the user\n * @property {Game} game - null or the current activity of the user\n * @property {String} guild_id - id of the guild\n * @property {String} status - status of the user, either \"idle\", \"dnd\", \"online\", or \"offline\"\n */","meta":{"filename":"PresenceCache.js","lineno":91,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"Presence","type":{"names":["Object"]},"description":"<p>A discord presence object</p>","properties":[{"type":{"names":["User"]},"description":"<p>the user which presence is being updated</p>","name":"user"},{"type":{"names":["Array.<String>"]},"description":"<p>array of role ids that belong to the user</p>","name":"roles"},{"type":{"names":["Game"]},"description":"<p>null or the current activity of the user</p>","name":"game"},{"type":{"names":["String"]},"description":"<p>id of the guild</p>","name":"guild_id"},{"type":{"names":["String"]},"description":"<p>status of the user, either &quot;idle&quot;, &quot;dnd&quot;, &quot;online&quot;, or &quot;offline&quot;</p>","name":"status"}],"longname":"Presence","scope":"global","$longname":"Presence"},{"comment":"/**\n * Cache responsible for storing presence related data\n * @extends BaseCache\n */","meta":{"range":[140,2894],"filename":"PresenceCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003396","name":"PresenceCache","type":"ClassDeclaration","paramnames":["storageEngine","userCache","boundObject"]}},"classdesc":"<p>Cache responsible for storing presence related data</p>","augments":["BaseCache"],"name":"PresenceCache","longname":"PresenceCache","kind":"class","scope":"global","description":"<p>Create a new Presence Cache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["UserCache"]},"description":"<p>-</p>","name":"userCache"},{"type":{"names":["Presence"]},"description":"<p>Optional, may be used to bind a presence object to the cache</p>","name":"boundObject"}],"$longname":"PresenceCache","$members":[{"comment":"/**\n     * Add an id to the index of a namespace\n     * @param {String} id - id to add\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[1685,1814],"filename":"BaseCache.js","lineno":54,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000075","name":"BaseCache#addToIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Add an id to the index of a namespace</p>","params":[{"type":{"names":["String"]},"description":"<p>id to add</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"PresenceCache#addToIndex","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"inherits":"BaseCache#addToIndex","inherited":true,"$longname":"PresenceCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"PresenceCache#bindGuild","kind":"function","memberof":"PresenceCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"PresenceCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"PresenceCache#bindObject","kind":"function","memberof":"PresenceCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"PresenceCache#bindObject"},{"comment":"/**\n     * Build an id consisting of $namespace.$id\n     * @param {String} id - id to append to namespace\n     * @return {String} - constructed id\n     */","meta":{"range":[1398,1459],"filename":"BaseCache.js","lineno":44,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000061","name":"BaseCache#buildId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Build an id consisting of $namespace.$id</p>","params":[{"type":{"names":["String"]},"description":"<p>id to append to namespace</p>","name":"id"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>constructed id</li>\n</ul>"}],"name":"buildId","longname":"PresenceCache#buildId","kind":"function","memberof":"PresenceCache","scope":"instance","inherits":"BaseCache#buildId","inherited":true,"$longname":"PresenceCache#buildId"},{"comment":"/**\n     * Get a presence via user id\n     * @param {String} id - id of a discord user\n     * @return {Promise.<PresenceCache|null>} - Returns a new PresenceCache with bound data or null if nothing was found\n     */","meta":{"range":[1087,1429],"filename":"PresenceCache.js","lineno":33,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003437","name":"PresenceCache#get","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Get a presence via user id</p>","params":[{"type":{"names":["String"]},"description":"<p>id of a discord user</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<(PresenceCache|null)>"]},"description":"<ul>\n<li>Returns a new PresenceCache with bound data or null if nothing was found</li>\n</ul>"}],"name":"get","longname":"PresenceCache#get","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"$longname":"PresenceCache#get"},{"comment":"/**\n     * Get the number of elements that are within an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<Number>}\n     */","meta":{"range":[3408,3535],"filename":"BaseCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000186","name":"BaseCache#getIndexCount","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get the number of elements that are within an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Number>"]}}],"name":"getIndexCount","longname":"PresenceCache#getIndexCount","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexCount","inherited":true,"$longname":"PresenceCache#getIndexCount"},{"comment":"/**\n     * Get all members from an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<String[]>}\n     */","meta":{"range":[2784,2915],"filename":"BaseCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000144","name":"BaseCache#getIndexMembers","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get all members from an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"PresenceCache#getIndexMembers","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexMembers","inherited":true,"$longname":"PresenceCache#getIndexMembers"},{"comment":"/**\n     * Check if an id is a member of an index\n     * @param {String} id - id to check\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<boolean>} - returns true if it is a part of the index, false otherwise\n     */","meta":{"range":[2469,2600],"filename":"BaseCache.js","lineno":74,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000121","name":"BaseCache#isIndexed","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Check if an id is a member of an index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to check</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>returns true if it is a part of the index, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"PresenceCache#isIndexed","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"inherits":"BaseCache#isIndexed","inherited":true,"$longname":"PresenceCache#isIndexed"},{"comment":"/**\n     * Remove a stored presence from the cache\n     * @param {String} id - id of the user the presence belongs to\n     * @return {Promise.<void>}\n     */","meta":{"range":[2562,2892],"filename":"PresenceCache.js","lineno":78,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003583","name":"PresenceCache#remove","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Remove a stored presence from the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the user the presence belongs to</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"PresenceCache#remove","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"$longname":"PresenceCache#remove"},{"comment":"/**\n     * Remove an id from the index\n     * @param {String} id - id to be removed\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[2037,2176],"filename":"BaseCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000098","name":"BaseCache#removeFromIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Remove an id from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to be removed</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"PresenceCache#removeFromIndex","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"inherits":"BaseCache#removeFromIndex","inherited":true,"$longname":"PresenceCache#removeFromIndex"},{"comment":"/**\n     * Delete an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[3081,3204],"filename":"BaseCache.js","lineno":92,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000165","name":"BaseCache#removeIndex","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Delete an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"PresenceCache#removeIndex","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"inherits":"BaseCache#removeIndex","inherited":true,"$longname":"PresenceCache#removeIndex"},{"comment":"/**\n     * Update the presence of a user.\n     *\n     * **This function automatically removes the guild_id, roles and user of a presence update before saving it**\n     * @param {String} id - id of the user the presence belongs to\n     * @param {Presence} data - updated presence data of the user\n     * @return {Promise.<PresenceCache>} - returns a bound presence cache\n     */","meta":{"range":[1817,2394],"filename":"PresenceCache.js","lineno":53,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003486","name":"PresenceCache#update","type":"MethodDefinition","paramnames":["id","data"]},"vars":{"":null}},"description":"<p>Update the presence of a user.</p>\n<p><strong>This function automatically removes the guild_id, roles and user of a presence update before saving it</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>id of the user the presence belongs to</p>","name":"id"},{"type":{"names":["Presence"]},"description":"<p>updated presence data of the user</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<PresenceCache>"]},"description":"<ul>\n<li>returns a bound presence cache</li>\n</ul>"}],"name":"update","longname":"PresenceCache#update","kind":"function","memberof":"PresenceCache","scope":"instance","async":true,"$longname":"PresenceCache#update"}],"$constructor":{"comment":"/**\n     * Create a new Presence Cache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - Storage engine to use for this cache\n     * @param {UserCache} userCache -\n     * @param {Presence} boundObject - Optional, may be used to bind a presence object to the cache\n     * @property {String} namespace=user - namespace of the cache\n     */","meta":{"range":[594,861],"filename":"PresenceCache.js","lineno":18,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003400","name":"PresenceCache","type":"MethodDefinition","paramnames":["storageEngine","userCache","boundObject"]},"vars":{"":null}},"description":"<p>Create a new Presence Cache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["UserCache"]},"description":"<p>-</p>","name":"userCache"},{"type":{"names":["Presence"]},"description":"<p>Optional, may be used to bind a presence object to the cache</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"defaultvalue":"user","description":"<p>namespace of the cache</p>","name":"namespace"}],"name":"PresenceCache","longname":"PresenceCache","kind":"class","scope":"global","undocumented":true,"$longname":"PresenceCache"}},{"comment":"/**\n * @typedef {class} RainCache - Main class used for accessing caches via subclasses and initializing the whole library\n * @extends EventEmitter\n * @property {Object} options - options that the user passed through the constructor\n * @property {Boolean} ready=false - whether the cache is ready to process events\n * @property {Connector} inbound - Connector used for receiving events\n * @property {Connector} outbound - Connector used for forwarding events\n * @property {Object} cache - Instantiated cache classes\n * @property {GuildCache} cache.guild - Instantiated Guild Cache\n * @property {ChannelCache} cache.channel - Instantiated Channel Cache\n */","meta":{"filename":"RainCache.js","lineno":19,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src","code":{}},"kind":"typedef","name":"RainCache","type":{"names":["class"]},"description":"<p>Main class used for accessing caches via subclasses and initializing the whole library</p>","augments":["EventEmitter"],"properties":[{"type":{"names":["Object"]},"description":"<p>options that the user passed through the constructor</p>","name":"options"},{"type":{"names":["Boolean"]},"defaultvalue":false,"description":"<p>whether the cache is ready to process events</p>","name":"ready"},{"type":{"names":["Connector"]},"description":"<p>Connector used for receiving events</p>","name":"inbound"},{"type":{"names":["Connector"]},"description":"<p>Connector used for forwarding events</p>","name":"outbound"},{"type":{"names":["Object"]},"description":"<p>Instantiated cache classes</p>","name":"cache"},{"type":{"names":["GuildCache"]},"description":"<p>Instantiated Guild Cache</p>","name":"cache.guild"},{"type":{"names":["ChannelCache"]},"description":"<p>Instantiated Channel Cache</p>","name":"cache.channel"}],"longname":"RainCache","scope":"global","$longname":"RainCache"},{"comment":"/**\n     * Create a new Cache instance\n     * @param {Object} options Options that should be used by RainCache\n     * @param {Object} options.storage - object with storage engines to use for the different cache classes\n     * @param {StorageEngine} [options.storage.default] - default storage engine to use when no special storage engine was passed for a class.\n     *\n     * **Use this option if you do not want to use a different type of storage engine for certain caches**\n     *\n     * You may also combine options: e.g. a RedisStorageEngine for presence and the rest within mongo, that's no issue.\n     *\n     * The cache type specific storage engine takes priority over the default one.\n     * @param {StorageEngine} [options.storage.guild=options.storage.default] - storage engine used by the guild cache\n     * @param {StorageEngine} [options.storage.channel=options.storage.default] - storage engine used by the channel cache\n     * @param {StorageEngine} [options.storage.channelMap=options.storage.default] - storage engine used by the channelMap cache\n     * @param {StorageEngine} [options.storage.member=options.storage.default] - storage engine used by the member cache\n     * @param {StorageEngine} [options.storage.user=options.storage.default] - storage engine used by the user cache\n     * @param {StorageEngine} [options.storage.role=options.storage.default] - storage engine used by the role cache\n     * @param {StorageEngine} [options.storage.emoji=options.storage.default] - storage engine used by the emoji cache\n     * @param {StorageEngine} [options.storage.presence=options.storage.default] - storage engine used by the presence cache\n     * @param {StorageEngine} [options.storage.permOverwrite=options.storage.default] - storage engine used by the permission overwrite cache\n     * @param {Object} [options.disabledEvents={}] - If you want to disable events from being processed,\n     * you can add them here like this: `{'MESSAGE_CREATE':true}`,\n     * this would disable any message_creates from being cached\n     * @param {Object} [options.cacheClasses] - object with classes (**not objects**) that should be used for each type of data that is cached\n     *\n     * **RainCache automatically uses default classes when no cache classes are passed, else it will use your classes.**\n     * @param {Object} [options.cacheClasses.guild=GuildCache] - cache class to use for guilds, defaults to the GuildCache\n     * @param {Object} [options.cacheClasses.channel=ChannelCache] - cache class to use for channels, defaults to ChannelCache\n     * @param {Object} [options.cacheClasses.channelMap=ChannelMapCache] - cache class to use for channels, defaults to ChannelMapCache\n     * @param {Connector} inboundConnector\n     * @param {Connector} outboundConnector\n     */","meta":{"range":[4171,5164],"filename":"RainCache.js","lineno":63,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src","code":{"id":"astnode100005736","name":"RainCache","type":"MethodDefinition","paramnames":["options","inboundConnector","outboundConnector"]},"vars":{"":null}},"description":"<p>Create a new Cache instance</p>","params":[{"type":{"names":["Object"]},"description":"<p>Options that should be used by RainCache</p>","name":"options"},{"type":{"names":["Object"]},"description":"<p>object with storage engines to use for the different cache classes</p>","name":"options.storage"},{"type":{"names":["StorageEngine"]},"optional":true,"description":"<p>default storage engine to use when no special storage engine was passed for a class.</p>\n<p><strong>Use this option if you do not want to use a different type of storage engine for certain caches</strong></p>\n<p>You may also combine options: e.g. a RedisStorageEngine for presence and the rest within mongo, that's no issue.</p>\n<p>The cache type specific storage engine takes priority over the default one.</p>","name":"options.storage.default"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the guild cache</p>","name":"options.storage.guild"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the channel cache</p>","name":"options.storage.channel"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the channelMap cache</p>","name":"options.storage.channelMap"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the member cache</p>","name":"options.storage.member"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the user cache</p>","name":"options.storage.user"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the role cache</p>","name":"options.storage.role"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the emoji cache</p>","name":"options.storage.emoji"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the presence cache</p>","name":"options.storage.presence"},{"type":{"names":["StorageEngine"]},"optional":true,"defaultvalue":"options.storage.default","description":"<p>storage engine used by the permission overwrite cache</p>","name":"options.storage.permOverwrite"},{"type":{"names":["Object"]},"optional":true,"defaultvalue":"{}","description":"<p>If you want to disable events from being processed,\nyou can add them here like this: <code>{'MESSAGE_CREATE':true}</code>,\nthis would disable any message_creates from being cached</p>","name":"options.disabledEvents"},{"type":{"names":["Object"]},"optional":true,"description":"<p>object with classes (<strong>not objects</strong>) that should be used for each type of data that is cached</p>\n<p><strong>RainCache automatically uses default classes when no cache classes are passed, else it will use your classes.</strong></p>","name":"options.cacheClasses"},{"type":{"names":["Object"]},"optional":true,"defaultvalue":"GuildCache","description":"<p>cache class to use for guilds, defaults to the GuildCache</p>","name":"options.cacheClasses.guild"},{"type":{"names":["Object"]},"optional":true,"defaultvalue":"ChannelCache","description":"<p>cache class to use for channels, defaults to ChannelCache</p>","name":"options.cacheClasses.channel"},{"type":{"names":["Object"]},"optional":true,"defaultvalue":"ChannelMapCache","description":"<p>cache class to use for channels, defaults to ChannelMapCache</p>","name":"options.cacheClasses.channelMap"},{"type":{"names":["Connector"]},"name":"inboundConnector"},{"type":{"names":["Connector"]},"name":"outboundConnector"}],"name":"RainCache","longname":"RainCache","kind":"class","scope":"global","$longname":"RainCache"},{"comment":"/**\n * @typedef {Object} Role - a discord role object\n * @property {String} id - role id\n * @property {String} name - role name\n * @property {Number} color - integer representation of hexadecimal color code\n * @property {Boolean} hoist - if this role is hoisted\n * @property {Number} position - position of the role\n * @property {Number} permissions - permission bit set\n * @property {Boolean} managed - if this role is managed by an integration\n * @property {Boolean} mentionable - if this role can be mentioned\n * @property {String} ?guild_id - optional guild id, of the guild that owns this role, not supplied by discord.\n */","meta":{"filename":"RoleCache.js","lineno":127,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"Role","type":{"names":["Object"]},"description":"<p>a discord role object</p>","properties":[{"type":{"names":["String"]},"description":"<p>role id</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>role name</p>","name":"name"},{"type":{"names":["Number"]},"description":"<p>integer representation of hexadecimal color code</p>","name":"color"},{"type":{"names":["Boolean"]},"description":"<p>if this role is hoisted</p>","name":"hoist"},{"type":{"names":["Number"]},"description":"<p>position of the role</p>","name":"position"},{"type":{"names":["Number"]},"description":"<p>permission bit set</p>","name":"permissions"},{"type":{"names":["Boolean"]},"description":"<p>if this role is managed by an integration</p>","name":"managed"},{"type":{"names":["Boolean"]},"description":"<p>if this role can be mentioned</p>","name":"mentionable"},{"type":{"names":["String"]},"description":"<p>optional guild id, of the guild that owns this role, not supplied by discord.</p>","name":"?guild_id"}],"longname":"Role","scope":"global","$longname":"Role"},{"comment":"/**\n * Cache responsible for storing role related data\n * @extends BaseCache\n */","meta":{"range":[136,4587],"filename":"RoleCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003652","name":"RoleCache","type":"ClassDeclaration","paramnames":["storageEngine","boundObject"]}},"classdesc":"<p>Cache responsible for storing role related data</p>","augments":["BaseCache"],"name":"RoleCache","longname":"RoleCache","kind":"class","scope":"global","description":"<p>Create a new RoleCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["Role"]},"description":"<p>Optional, may be used to bind a role object to the cache</p>","name":"boundObject"}],"$longname":"RoleCache","$members":[{"comment":"/**\n     * Add an id to the index of a namespace\n     * @param {String} id - id to add\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[1685,1814],"filename":"BaseCache.js","lineno":54,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000075","name":"BaseCache#addToIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Add an id to the index of a namespace</p>","params":[{"type":{"names":["String"]},"description":"<p>id to add</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"RoleCache#addToIndex","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"inherits":"BaseCache#addToIndex","inherited":true,"$longname":"RoleCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"RoleCache#bindGuild","kind":"function","memberof":"RoleCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"RoleCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"RoleCache#bindObject","kind":"function","memberof":"RoleCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"RoleCache#bindObject"},{"comment":"/**\n     * Build a unique key for the role cache entry\n     * @param {String} roleId - id of the role\n     * @param {String} guildId - id of the guild belonging to the role\n     * @return {String} - the prepared key\n     */","meta":{"range":[4420,4585],"filename":"RoleCache.js","lineno":119,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003980","name":"RoleCache#buildId","type":"MethodDefinition","paramnames":["roleId","guildId"]},"vars":{"":null}},"description":"<p>Build a unique key for the role cache entry</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the role</p>","name":"roleId"},{"type":{"names":["String"]},"description":"<p>id of the guild belonging to the role</p>","name":"guildId"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>the prepared key</li>\n</ul>"}],"name":"buildId","longname":"RoleCache#buildId","kind":"function","memberof":"RoleCache","scope":"instance","overrides":"BaseCache#buildId","$longname":"RoleCache#buildId"},{"comment":"/**\n     * Filter for roles by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for the filtering\n     * @param {String} guildId - id of the guild belonging to the roles\n     * @param {String[]} ids - array of role ids that should be used for the filtering\n     * @return {Promise.<RoleCache[]>} - array of bound role caches\n     */","meta":{"range":[3344,3562],"filename":"RoleCache.js","lineno":96,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003900","name":"RoleCache#filter","type":"MethodDefinition","paramnames":["fn","guildId","ids"]},"vars":{"":null}},"description":"<p>Filter for roles by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for the filtering</p>","name":"fn"},{"type":{"names":["String"]},"description":"<p>id of the guild belonging to the roles</p>","name":"guildId"},{"type":{"names":["Array.<String>"]},"description":"<p>array of role ids that should be used for the filtering</p>","name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<Array.<RoleCache>>"]},"description":"<ul>\n<li>array of bound role caches</li>\n</ul>"}],"name":"filter","longname":"RoleCache#filter","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"$longname":"RoleCache#filter"},{"comment":"/**\n     * Find a role by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for filtering for a single role\n     * @param {String} guildId - id of the guild belonging to the roles\n     * @param {String[]} ids - array of role ids that should be used for the filtering\n     * @return {Promise.<RoleCache>} - bound role cache\n     */","meta":{"range":[3986,4186],"filename":"RoleCache.js","lineno":108,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003943","name":"RoleCache#find","type":"MethodDefinition","paramnames":["fn","guildId","ids"]},"vars":{"":null}},"description":"<p>Find a role by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for filtering for a single role</p>","name":"fn"},{"type":{"names":["String"]},"description":"<p>id of the guild belonging to the roles</p>","name":"guildId"},{"type":{"names":["Array.<String>"]},"description":"<p>array of role ids that should be used for the filtering</p>","name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<RoleCache>"]},"description":"<ul>\n<li>bound role cache</li>\n</ul>"}],"name":"find","longname":"RoleCache#find","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"$longname":"RoleCache#find"},{"comment":"/**\n     * Get a role via id and guild id of the role\n     * @param {String} id - id of the role\n     * @param {String} guildId - id of the guild belonging to the role\n     * @return {Promise.<RoleCache|null>} Returns a Role Cache with a bound role or null if no role was found\n     */","meta":{"range":[1071,1368],"filename":"RoleCache.js","lineno":32,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003686","name":"RoleCache#get","type":"MethodDefinition","paramnames":["id","guildId"]},"vars":{"":null}},"description":"<p>Get a role via id and guild id of the role</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the role</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>id of the guild belonging to the role</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<(RoleCache|null)>"]},"description":"<p>Returns a Role Cache with a bound role or null if no role was found</p>"}],"name":"get","longname":"RoleCache#get","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"$longname":"RoleCache#get"},{"comment":"/**\n     * Get the number of elements that are within an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<Number>}\n     */","meta":{"range":[3408,3535],"filename":"BaseCache.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000186","name":"BaseCache#getIndexCount","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get the number of elements that are within an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Number>"]}}],"name":"getIndexCount","longname":"RoleCache#getIndexCount","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexCount","inherited":true,"$longname":"RoleCache#getIndexCount"},{"comment":"/**\n     * Get all members from an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<String[]>}\n     */","meta":{"range":[2784,2915],"filename":"BaseCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000144","name":"BaseCache#getIndexMembers","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Get all members from an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]}}],"name":"getIndexMembers","longname":"RoleCache#getIndexMembers","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"inherits":"BaseCache#getIndexMembers","inherited":true,"$longname":"RoleCache#getIndexMembers"},{"comment":"/**\n     * Check if an id is a member of an index\n     * @param {String} id - id to check\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<boolean>} - returns true if it is a part of the index, false otherwise\n     */","meta":{"range":[2469,2600],"filename":"BaseCache.js","lineno":74,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000121","name":"BaseCache#isIndexed","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Check if an id is a member of an index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to check</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>returns true if it is a part of the index, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"RoleCache#isIndexed","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"inherits":"BaseCache#isIndexed","inherited":true,"$longname":"RoleCache#isIndexed"},{"comment":"/**\n     * Remove a role from the cache\n     * @param {String} id - id of the role\n     * @param {String} guildId - id of the guild belonging to the role\n     * @return {Promise.<void>}\n     */","meta":{"range":[2488,2917],"filename":"RoleCache.js","lineno":76,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003831","name":"RoleCache#remove","type":"MethodDefinition","paramnames":["id","guildId"]},"vars":{"":null}},"description":"<p>Remove a role from the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the role</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>id of the guild belonging to the role</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"RoleCache#remove","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"$longname":"RoleCache#remove"},{"comment":"/**\n     * Remove an id from the index\n     * @param {String} id - id to be removed\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[2037,2176],"filename":"BaseCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000098","name":"BaseCache#removeFromIndex","type":"MethodDefinition","paramnames":["id","objectId"]},"vars":{"":null}},"description":"<p>Remove an id from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id to be removed</p>","name":"id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"RoleCache#removeFromIndex","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"inherits":"BaseCache#removeFromIndex","inherited":true,"$longname":"RoleCache#removeFromIndex"},{"comment":"/**\n     * Delete an index\n     * @param {String} [objectId=this.boundGuild] - id of the parent object of the index\n     * @return {Promise.<void>}\n     */","meta":{"range":[3081,3204],"filename":"BaseCache.js","lineno":92,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000165","name":"BaseCache#removeIndex","type":"MethodDefinition","paramnames":["objectId"]},"vars":{"":null}},"description":"<p>Delete an index</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.boundGuild","description":"<p>id of the parent object of the index</p>","name":"objectId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"RoleCache#removeIndex","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"inherits":"BaseCache#removeIndex","inherited":true,"$longname":"RoleCache#removeIndex"},{"comment":"/**\n     * Update a role\n     * @param {String} id - id of the role\n     * @param {String} guildId - id of the guild belonging to the role\n     * @param {Role} data - new role data\n     * @return {Promise.<RoleCache>} - returns a bound RoleCache once the data was updated.\n     */","meta":{"range":[1659,2284],"filename":"RoleCache.js","lineno":50,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003730","name":"RoleCache#update","type":"MethodDefinition","paramnames":["id","guildId","data"]},"vars":{"":null}},"description":"<p>Update a role</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the role</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>id of the guild belonging to the role</p>","name":"guildId"},{"type":{"names":["Role"]},"description":"<p>new role data</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<RoleCache>"]},"description":"<ul>\n<li>returns a bound RoleCache once the data was updated.</li>\n</ul>"}],"name":"update","longname":"RoleCache#update","kind":"function","memberof":"RoleCache","scope":"instance","async":true,"$longname":"RoleCache#update"}],"$constructor":{"comment":"/**\n     * Create a new RoleCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - Storage engine to use for this cache\n     * @param {Role} boundObject - Optional, may be used to bind a role object to the cache\n     * @property {String} namespace=role - namespace of the cache, defaults to `role`\n     */","meta":{"range":[555,775],"filename":"RoleCache.js","lineno":17,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100003656","name":"RoleCache","type":"MethodDefinition","paramnames":["storageEngine","boundObject"]},"vars":{"":null}},"description":"<p>Create a new RoleCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["Role"]},"description":"<p>Optional, may be used to bind a role object to the cache</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"defaultvalue":"role","description":"<p>namespace of the cache, defaults to <code>role</code></p>","name":"namespace"}],"name":"RoleCache","longname":"RoleCache","kind":"class","scope":"global","undocumented":true,"$longname":"RoleCache"}},{"comment":"/**\n * @typedef {Object} User - a discord user object\n * @property {String} id - id of the user\n * @property {String} username - username of the user\n * @property {String} discriminator - 4 digit long discord tag\n * @property {String} avatar - avatar hash of the user\n */","meta":{"filename":"UserCache.js","lineno":165,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{}},"kind":"typedef","name":"User","type":{"names":["Object"]},"description":"<p>a discord user object</p>","properties":[{"type":{"names":["String"]},"description":"<p>id of the user</p>","name":"id"},{"type":{"names":["String"]},"description":"<p>username of the user</p>","name":"username"},{"type":{"names":["String"]},"description":"<p>4 digit long discord tag</p>","name":"discriminator"},{"type":{"names":["String"]},"description":"<p>avatar hash of the user</p>","name":"avatar"}],"longname":"User","scope":"global","$longname":"User"},{"comment":"/**\n * Cache responsible for caching users\n * @extends BaseCache\n */","meta":{"range":[124,5463],"filename":"UserCache.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004023","name":"UserCache","type":"ClassDeclaration","paramnames":["storageEngine","boundObject"]}},"classdesc":"<p>Cache responsible for caching users</p>","augments":["BaseCache"],"name":"UserCache","longname":"UserCache","kind":"class","scope":"global","description":"<p>Create a new UserCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["User"]},"description":"<p>Optional, may be used to bind a user object to the cache</p>","name":"boundObject"}],"$longname":"UserCache","$members":[{"comment":"/**\n     * Add a user to the index\n     * @param {String} id - id of the user\n     * @return {Promise.<void>}\n     */","meta":{"range":[4016,4109],"filename":"UserCache.js","lineno":117,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004311","name":"UserCache#addToIndex","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Add a user to the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the user</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToIndex","longname":"UserCache#addToIndex","kind":"function","memberof":"UserCache","scope":"instance","async":true,"overrides":"BaseCache#addToIndex","$longname":"UserCache#addToIndex"},{"comment":"/**\n     * Bind a guild id to the cache\n     * @param {String} guildId - id of the guild that should be bound to this cache\n     * @return {this}\n     * @public\n     */","meta":{"range":[1151,1233],"filename":"BaseCache.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000048","name":"BaseCache#bindGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Bind a guild id to the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the guild that should be bound to this cache</p>","name":"guildId"}],"returns":[{"type":{"names":["this"]}}],"access":"public","name":"bindGuild","longname":"UserCache#bindGuild","kind":"function","memberof":"UserCache","scope":"instance","inherits":"BaseCache#bindGuild","inherited":true,"$longname":"UserCache#bindGuild"},{"comment":"/**\n     * Bind an object to the cache instance, you can read more on binding on the landing page of the documentation\n     * @param {Object} boundObject - Object to bind to this cache instance\n     */","meta":{"range":[818,972],"filename":"BaseCache.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000023","name":"BaseCache#bindObject","type":"MethodDefinition","paramnames":["boundObject"]},"vars":{"":null}},"description":"<p>Bind an object to the cache instance, you can read more on binding on the landing page of the documentation</p>","params":[{"type":{"names":["Object"]},"description":"<p>Object to bind to this cache instance</p>","name":"boundObject"}],"name":"bindObject","longname":"UserCache#bindObject","kind":"function","memberof":"UserCache","scope":"instance","inherits":"BaseCache#bindObject","inherited":true,"$longname":"UserCache#bindObject"},{"comment":"/**\n     * Bind a user id to the cache, used by the member cache\n     * @param {String} userId - id of the user\n     * @return {UserCache} - Returns a UserCache that has an id bound to it, which serves as the default argument to get, update and delete\n     */","meta":{"range":[3815,3888],"filename":"UserCache.js","lineno":107,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004298","name":"UserCache#bindUserId","type":"MethodDefinition","paramnames":["userId"]},"vars":{"":null}},"description":"<p>Bind a user id to the cache, used by the member cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the user</p>","name":"userId"}],"returns":[{"type":{"names":["UserCache"]},"description":"<ul>\n<li>Returns a UserCache that has an id bound to it, which serves as the default argument to get, update and delete</li>\n</ul>"}],"name":"bindUserId","longname":"UserCache#bindUserId","kind":"function","memberof":"UserCache","scope":"instance","$longname":"UserCache#bindUserId"},{"comment":"/**\n     * Build an id consisting of $namespace.$id\n     * @param {String} id - id to append to namespace\n     * @return {String} - constructed id\n     */","meta":{"range":[1398,1459],"filename":"BaseCache.js","lineno":44,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100000061","name":"BaseCache#buildId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Build an id consisting of $namespace.$id</p>","params":[{"type":{"names":["String"]},"description":"<p>id to append to namespace</p>","name":"id"}],"returns":[{"type":{"names":["String"]},"description":"<ul>\n<li>constructed id</li>\n</ul>"}],"name":"buildId","longname":"UserCache#buildId","kind":"function","memberof":"UserCache","scope":"instance","inherits":"BaseCache#buildId","inherited":true,"$longname":"UserCache#buildId"},{"comment":"/**\n     * Filter for users by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for the filtering\n     * @param {String[]} ids - Array of user ids, if omitted the global user index will be used\n     * @return {Promise.<UserCache[]>}\n     */","meta":{"range":[2737,2920],"filename":"UserCache.js","lineno":83,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004226","name":"UserCache#filter","type":"MethodDefinition","paramnames":["fn","ids"]},"vars":{"":null}},"description":"<p>Filter for users by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for the filtering</p>","name":"fn"},{"type":{"names":["Array.<String>"]},"description":"<p>Array of user ids, if omitted the global user index will be used</p>","name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<Array.<UserCache>>"]}}],"name":"filter","longname":"UserCache#filter","kind":"function","memberof":"UserCache","scope":"instance","async":true,"$longname":"UserCache#filter"},{"comment":"/**\n     * Find a user by providing a filter function which returns true upon success and false otherwise\n     * @param {Function} fn - filter function to use for filtering for a user\n     * @param {String[]} ids - List of ids that should be used as the scope of the filter\n     * @return {Promise.<UserCache|null>} - Returns a User Cache with a bound user or null if no user was found\n     */","meta":{"range":[3324,3545],"filename":"UserCache.js","lineno":94,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004262","name":"UserCache#find","type":"MethodDefinition","paramnames":["fn","ids"]},"vars":{"":null}},"description":"<p>Find a user by providing a filter function which returns true upon success and false otherwise</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use for filtering for a user</p>","name":"fn"},{"type":{"names":["Array.<String>"]},"description":"<p>List of ids that should be used as the scope of the filter</p>","name":"ids","defaultvalue":null}],"returns":[{"type":{"names":["Promise.<(UserCache|null)>"]},"description":"<ul>\n<li>Returns a User Cache with a bound user or null if no user was found</li>\n</ul>"}],"name":"find","longname":"UserCache#find","kind":"function","memberof":"UserCache","scope":"instance","async":true,"$longname":"UserCache#find"},{"comment":"/**\n     * Loads a user from the cache via id\n     * @param {String} [id=this.id] - discord id of the user\n     * @return {Promise.<UserCache|Null>} Returns a User Cache with a bound user or null if no user was found\n     */","meta":{"range":[994,1283],"filename":"UserCache.js","lineno":31,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004057","name":"UserCache#get","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Loads a user from the cache via id</p>","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"this.id","description":"<p>discord id of the user</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<(UserCache|Null)>"]},"description":"<p>Returns a User Cache with a bound user or null if no user was found</p>"}],"name":"get","longname":"UserCache#get","kind":"function","memberof":"UserCache","scope":"instance","async":true,"$longname":"UserCache#get"},{"comment":"/**\n     * Get the number of users that are currently cached\n     * @return {Promise.<Number>} - Number of users currently cached\n     */","meta":{"range":[5368,5461],"filename":"UserCache.js","lineno":160,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004387","name":"UserCache#getIndexCount","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get the number of users that are currently cached</p>","returns":[{"type":{"names":["Promise.<Number>"]},"description":"<ul>\n<li>Number of users currently cached</li>\n</ul>"}],"name":"getIndexCount","longname":"UserCache#getIndexCount","kind":"function","memberof":"UserCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#getIndexCount","$longname":"UserCache#getIndexCount"},{"comment":"/**\n     * Get a list of currently indexed users, since users is a global namespace,\n     * this will return **ALL** users that the bot cached currently\n     * @return {Promise.<String[]>} - Array with a list of ids of users that are indexed\n     */","meta":{"range":[4881,4978],"filename":"UserCache.js","lineno":144,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004359","name":"UserCache#getIndexMembers","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get a list of currently indexed users, since users is a global namespace,\nthis will return <strong>ALL</strong> users that the bot cached currently</p>","returns":[{"type":{"names":["Promise.<Array.<String>>"]},"description":"<ul>\n<li>Array with a list of ids of users that are indexed</li>\n</ul>"}],"name":"getIndexMembers","longname":"UserCache#getIndexMembers","kind":"function","memberof":"UserCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#getIndexMembers","$longname":"UserCache#getIndexMembers"},{"comment":"/**\n     * Check if a user is indexed\n     * @param {String} id - id of the user\n     * @return {Promise.<boolean>} - True if the user is indexed, false otherwise\n     */","meta":{"range":[4526,4621],"filename":"UserCache.js","lineno":135,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004343","name":"UserCache#isIndexed","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Check if a user is indexed</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the user</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<boolean>"]},"description":"<ul>\n<li>True if the user is indexed, false otherwise</li>\n</ul>"}],"name":"isIndexed","longname":"UserCache#isIndexed","kind":"function","memberof":"UserCache","scope":"instance","async":true,"overrides":"BaseCache#isIndexed","$longname":"UserCache#isIndexed"},{"comment":"/**\n     * Remove a user from the cache\n     * @param {String} id=this.id - discord id of the user\n     * @return {Promise.<void>}\n     */","meta":{"range":[2026,2402],"filename":"UserCache.js","lineno":64,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004162","name":"UserCache#remove","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Remove a user from the cache</p>","params":[{"type":{"names":["String"]},"defaultvalue":"this.id","description":"<p>discord id of the user</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"UserCache#remove","kind":"function","memberof":"UserCache","scope":"instance","async":true,"$longname":"UserCache#remove"},{"comment":"/**\n     * Remove a user from the index\n     * @param {String} id - id of the user\n     * @return {Promise.<void>}\n     */","meta":{"range":[4242,4345],"filename":"UserCache.js","lineno":126,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004327","name":"UserCache#removeFromIndex","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Remove a user from the index</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the user</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromIndex","longname":"UserCache#removeFromIndex","kind":"function","memberof":"UserCache","scope":"instance","async":true,"overrides":"BaseCache#removeFromIndex","$longname":"UserCache#removeFromIndex"},{"comment":"/**\n     * Delete the user index, you should probably **not** use this function, but I won't stop you.\n     * @return {Promise.<void>}\n     */","meta":{"range":[5131,5220],"filename":"UserCache.js","lineno":152,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004373","name":"UserCache#removeIndex","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Delete the user index, you should probably <strong>not</strong> use this function, but I won't stop you.</p>","returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeIndex","longname":"UserCache#removeIndex","kind":"function","memberof":"UserCache","scope":"instance","params":[],"async":true,"overrides":"BaseCache#removeIndex","$longname":"UserCache#removeIndex"},{"comment":"/**\n     * Update a user entry in the cache\n     * @param {String} id=this.id - discord id of the user\n     * @param {Object|User} data - updated data of the user, it will be merged with the old data\n     * @return {Promise.<UserCache>}\n     */","meta":{"range":[1538,1877],"filename":"UserCache.js","lineno":48,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004103","name":"UserCache#update","type":"MethodDefinition","paramnames":["id","data"]},"vars":{"":null}},"description":"<p>Update a user entry in the cache</p>","params":[{"type":{"names":["String"]},"defaultvalue":"this.id","description":"<p>discord id of the user</p>","name":"id"},{"type":{"names":["Object","User"]},"description":"<p>updated data of the user, it will be merged with the old data</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<UserCache>"]}}],"name":"update","longname":"UserCache#update","kind":"function","memberof":"UserCache","scope":"instance","async":true,"$longname":"UserCache#update"}],"$constructor":{"comment":"/**\n     * Create a new UserCache\n     *\n     * **This class is automatically instantiated by RainCache**\n     * @param {StorageEngine} storageEngine - Storage engine to use for this cache\n     * @param {User} boundObject - Optional, may be used to bind a user object to the cache\n     * @property {String} namespace - namespace of this cache, defaults to `user`\n     */","meta":{"range":[539,759],"filename":"UserCache.js","lineno":17,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/cache","code":{"id":"astnode100004027","name":"UserCache","type":"MethodDefinition","paramnames":["storageEngine","boundObject"]},"vars":{"":null}},"description":"<p>Create a new UserCache</p>\n<p><strong>This class is automatically instantiated by RainCache</strong></p>","params":[{"type":{"names":["StorageEngine"]},"description":"<p>Storage engine to use for this cache</p>","name":"storageEngine"},{"type":{"names":["User"]},"description":"<p>Optional, may be used to bind a user object to the cache</p>","name":"boundObject"}],"properties":[{"type":{"names":["String"]},"description":"<p>namespace of this cache, defaults to <code>user</code></p>","name":"namespace"}],"name":"UserCache","longname":"UserCache","kind":"class","scope":"global","undocumented":true,"$longname":"UserCache"}}],"symbols":["BaseCache","BaseCache#addToIndex","BaseCache#bindGuild","BaseCache#bindObject","BaseCache#buildId","BaseCache#getIndexCount","BaseCache#getIndexMembers","BaseCache#isIndexed","BaseCache#removeFromIndex","BaseCache#removeIndex","Channel","ChannelCache","ChannelCache#addToIndex","ChannelCache#bindGuild","ChannelCache#bindObject","ChannelCache#buildId","ChannelCache#filter","ChannelCache#find","ChannelCache#get","ChannelCache#getIndexCount","ChannelCache#getIndexMembers","ChannelCache#isIndexed","ChannelCache#remove","ChannelCache#removeFromIndex","ChannelCache#removeIndex","ChannelCache#update","ChannelMapCache","ChannelMapCache#addToIndex","ChannelMapCache#bindGuild","ChannelMapCache#bindObject","ChannelMapCache#buildId","ChannelMapCache#get","ChannelMapCache#getIndexCount","ChannelMapCache#getIndexMembers","ChannelMapCache#isIndexed","ChannelMapCache#remove","ChannelMapCache#removeFromIndex","ChannelMapCache#removeIndex","ChannelMapCache#update","Emoji","EmojiCache","EmojiCache#addToIndex","EmojiCache#bindGuild","EmojiCache#bindObject","EmojiCache#buildId","EmojiCache#filter","EmojiCache#find","EmojiCache#get","EmojiCache#getIndexCount","EmojiCache#getIndexMembers","EmojiCache#isIndexed","EmojiCache#remove","EmojiCache#removeFromIndex","EmojiCache#removeIndex","EmojiCache#update","EventProcessor","Game","Guild","GuildCache","GuildCache#addToIndex","GuildCache#bindGuild","GuildCache#bindObject","GuildCache#buildId","GuildCache#filter","GuildCache#find","GuildCache#get","GuildCache#getIndexCount","GuildCache#getIndexMembers","GuildCache#isIndexed","GuildCache#remove","GuildCache#removeFromIndex","GuildCache#removeIndex","GuildCache#update","MemberCache","MemberCache#addToIndex","MemberCache#bindGuild","MemberCache#bindObject","MemberCache#buildId","MemberCache#filter","MemberCache#get","MemberCache#getIndexCount","MemberCache#getIndexMembers","MemberCache#isIndexed","MemberCache#remove","MemberCache#removeFromIndex","MemberCache#removeIndex","MemberCache#update","PermissionOverwrite","PermissionOverwriteCache","PermissionOverwriteCache#addToIndex","PermissionOverwriteCache#bindChannel","PermissionOverwriteCache#bindGuild","PermissionOverwriteCache#bindObject","PermissionOverwriteCache#buildId","PermissionOverwriteCache#filter","PermissionOverwriteCache#find","PermissionOverwriteCache#get","PermissionOverwriteCache#getIndexCount","PermissionOverwriteCache#getIndexMembers","PermissionOverwriteCache#isIndexed","PermissionOverwriteCache#remove","PermissionOverwriteCache#removeFromIndex","PermissionOverwriteCache#removeIndex","PermissionOverwriteCache#update","Presence","PresenceCache","PresenceCache#addToIndex","PresenceCache#bindGuild","PresenceCache#bindObject","PresenceCache#buildId","PresenceCache#get","PresenceCache#getIndexCount","PresenceCache#getIndexMembers","PresenceCache#isIndexed","PresenceCache#remove","PresenceCache#removeFromIndex","PresenceCache#removeIndex","PresenceCache#update","RainCache","RainCache","Role","RoleCache","RoleCache#addToIndex","RoleCache#bindGuild","RoleCache#bindObject","RoleCache#buildId","RoleCache#filter","RoleCache#find","RoleCache#get","RoleCache#getIndexCount","RoleCache#getIndexMembers","RoleCache#isIndexed","RoleCache#remove","RoleCache#removeFromIndex","RoleCache#removeIndex","RoleCache#update","User","UserCache","UserCache#addToIndex","UserCache#bindGuild","UserCache#bindObject","UserCache#bindUserId","UserCache#buildId","UserCache#filter","UserCache#find","UserCache#get","UserCache#getIndexCount","UserCache#getIndexMembers","UserCache#isIndexed","UserCache#remove","UserCache#removeFromIndex","UserCache#removeIndex","UserCache#update"]},"Connectors":{"documentation":[{"comment":"/**\n * Amqp Connector, used for receiving and sending messages to an amqp based message queue\n * @extends BaseConnector\n */","meta":{"range":[218,1955],"filename":"AmqpConnector.js","lineno":9,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000016","name":"AqmpConnector","type":"ClassDeclaration","paramnames":["options"]}},"classdesc":"<p>Amqp Connector, used for receiving and sending messages to an amqp based message queue</p>","augments":["BaseConnector"],"name":"AqmpConnector","longname":"AqmpConnector","kind":"class","scope":"global","description":"<p>Create a new Amqp Connector</p>","params":[{"type":{"names":["Object"]},"description":"<p>Options</p>","name":"options"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"amqp://localhost","description":"<p>amqp host to connect to</p>","name":"options.amqpUrl"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"test-pre-cache","description":"<p>amqp queue to use for receiving events</p>","name":"options.amqpQueue"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"test-post-cache","description":"<p>amqp queue to use for sending events</p>","name":"options.sendQueue"}],"$longname":"AqmpConnector","$members":[{"comment":"/**\n     * Initializes the connector by creating a new connection to the amqp host set via config and creating a new queue to receive messages from\n     * @returns {Promise.<void>}\n     */","meta":{"range":[1127,1635],"filename":"AmqpConnector.js","lineno":30,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000067","name":"AqmpConnector#initialize","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Initializes the connector by creating a new connection to the amqp host set via config and creating a new queue to receive messages from</p>","returns":[{"type":{"names":["Promise.<void>"]}}],"name":"initialize","longname":"AqmpConnector#initialize","kind":"function","memberof":"AqmpConnector","scope":"instance","params":[],"async":true,"$longname":"AqmpConnector#initialize"},{"comment":"/**\n     * Forward an event to the outgoing amqp queue\n     * @param {Object} event - event that should be forwarded, has to be JSON.stringify-able\n     * @returns {Promise.<void>}\n     */","meta":{"range":[1834,1953],"filename":"AmqpConnector.js","lineno":47,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000160","name":"AqmpConnector#send","type":"MethodDefinition","paramnames":["event"]},"vars":{"":null}},"description":"<p>Forward an event to the outgoing amqp queue</p>","params":[{"type":{"names":["Object"]},"description":"<p>event that should be forwarded, has to be JSON.stringify-able</p>","name":"event"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"send","longname":"AqmpConnector#send","kind":"function","memberof":"AqmpConnector","scope":"instance","async":true,"$longname":"AqmpConnector#send"}],"$constructor":{"comment":"/**\n     * Create a new Amqp Connector\n     * @param {Object} options - Options\n     * @param {String} [options.amqpUrl=amqp://localhost] - amqp host to connect to\n     * @param {String} [options.amqpQueue=test-pre-cache] - amqp queue to use for receiving events\n     * @param {String} [options.sendQueue=test-post-cache] - amqp queue to use for sending events\n     */","meta":{"range":[639,928],"filename":"AmqpConnector.js","lineno":17,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000020","name":"AqmpConnector","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"<p>Create a new Amqp Connector</p>","params":[{"type":{"names":["Object"]},"description":"<p>Options</p>","name":"options"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"amqp://localhost","description":"<p>amqp host to connect to</p>","name":"options.amqpUrl"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"test-pre-cache","description":"<p>amqp queue to use for receiving events</p>","name":"options.amqpQueue"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"test-post-cache","description":"<p>amqp queue to use for sending events</p>","name":"options.sendQueue"}],"name":"AqmpConnector","longname":"AqmpConnector","kind":"class","scope":"global","undocumented":true,"$longname":"AqmpConnector"}},{"comment":"/**\n * Direct Connector, useful when using raincache with an existing solution library that runs in the same process\n * @extends BaseConnector\n */","meta":{"range":[210,1136],"filename":"DirectConnector.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000264","name":"DirectConnector","type":"ClassDeclaration","paramnames":[]}},"classdesc":"<p>Direct Connector, useful when using raincache with an existing solution library that runs in the same process</p>","augments":["BaseConnector"],"name":"DirectConnector","longname":"DirectConnector","kind":"class","scope":"global","description":"<p>Create a new Direct Connector</p>","params":[],"$longname":"DirectConnector","$members":[{"comment":"/**\n         * @event DirectConnector#send\n         * @type {Object}\n         * @description Emitted once an event was fully processed by RainCache, you can now forward that event somewhere else\n         */","meta":{"filename":"DirectConnector.js","lineno":39,"columnno":8,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{}},"kind":"event","name":"send","type":{"names":["Object"]},"description":"<p>Emitted once an event was fully processed by RainCache, you can now forward that event somewhere else</p>","memberof":"DirectConnector","longname":"DirectConnector#event:send","scope":"instance","$longname":"DirectConnector#event:send"},{"comment":"/**\n     * Init Method, initializes this connector\n     * @returns {Promise.<null>}\n     */","meta":{"range":[481,568],"filename":"DirectConnector.js","lineno":21,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000281","name":"DirectConnector#initialize","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Init Method, initializes this connector</p>","returns":[{"type":{"names":["Promise.<null>"]}}],"name":"initialize","longname":"DirectConnector#initialize","kind":"function","memberof":"DirectConnector","scope":"instance","params":[],"async":true,"$longname":"DirectConnector#initialize"},{"comment":"/**\n     * Forward a discord event to RainCache\n     * @param {Object} event - received event\n     */","meta":{"range":[680,737],"filename":"DirectConnector.js","lineno":30,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000296","name":"DirectConnector#receive","type":"MethodDefinition","paramnames":["event"]},"vars":{"":null}},"description":"<p>Forward a discord event to RainCache</p>","params":[{"type":{"names":["Object"]},"description":"<p>received event</p>","name":"event"}],"name":"receive","longname":"DirectConnector#receive","kind":"function","memberof":"DirectConnector","scope":"instance","$longname":"DirectConnector#receive"},{"comment":"/**\n     * Called when RainCache finishes processing of an event\n     * @param {Object} event - received event\n     */","meta":{"range":[866,1134],"filename":"DirectConnector.js","lineno":38,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000308","name":"DirectConnector#send","type":"MethodDefinition","paramnames":["event"]},"vars":{"":null}},"description":"<p>Called when RainCache finishes processing of an event</p>","params":[{"type":{"names":["Object"]},"description":"<p>received event</p>","name":"event"}],"name":"send","longname":"DirectConnector#send","kind":"function","memberof":"DirectConnector","scope":"instance","$longname":"DirectConnector#send"}],"$constructor":{"comment":"/**\n     * Create a new Direct Connector\n     */","meta":{"range":[313,379],"filename":"DirectConnector.js","lineno":12,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/connector","code":{"id":"astnode100000268","name":"DirectConnector","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Create a new Direct Connector</p>","name":"DirectConnector","longname":"DirectConnector","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"DirectConnector"}}],"symbols":["AqmpConnector","AqmpConnector#initialize","AqmpConnector#send","DirectConnector","DirectConnector#event:send","DirectConnector#initialize","DirectConnector#receive","DirectConnector#send"]},"StorageEngines":{"documentation":[{"comment":"/**\n * @typedef {class} RedisStorageEngine - StorageEngine which uses redis as a datasource\n * @property {Redis} client - redis client\n * @property {Boolean} ready - whether this storage engine is ready for usage\n * @property {Boolean} useHash - whether hash objects should be used for storing data\n * @property {Object} options - options that are passed to the redis client\n * @extends BaseStorageEngine\n */","meta":{"filename":"RedisStorageEngine.js","lineno":8,"columnno":0,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{}},"kind":"typedef","name":"RedisStorageEngine","type":{"names":["class"]},"description":"<p>StorageEngine which uses redis as a datasource</p>","properties":[{"type":{"names":["Redis"]},"description":"<p>redis client</p>","name":"client"},{"type":{"names":["Boolean"]},"description":"<p>whether this storage engine is ready for usage</p>","name":"ready"},{"type":{"names":["Boolean"]},"description":"<p>whether hash objects should be used for storing data</p>","name":"useHash"},{"type":{"names":["Object"]},"description":"<p>options that are passed to the redis client</p>","name":"options"}],"augments":["BaseStorageEngine"],"longname":"RedisStorageEngine","scope":"global","$longname":"RedisStorageEngine","$members":[{"comment":"/**\n     * Add an id (or a list of them) to a list\n     * @param {String} listId - id of the list\n     * @param {String[]} ids - array of ids that should be added\n     * @returns {Promise.<void>}\n     */","meta":{"range":[5266,5353],"filename":"RedisStorageEngine.js","lineno":159,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000513","name":"RedisStorageEngine#addToList","type":"MethodDefinition","paramnames":["listId","ids"]},"vars":{"":null}},"description":"<p>Add an id (or a list of them) to a list</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the list</p>","name":"listId"},{"type":{"names":["Array.<String>"]},"description":"<p>array of ids that should be added</p>","name":"ids"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"addToList","longname":"RedisStorageEngine#addToList","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#addToList"},{"comment":"/**\n     * Filter for an object\n     * @param {Function} fn - filter function to use\n     * @param {String[]} ids - array of ids that should be used for the filtering\n     * @param {String} namespace - namespace of the filter\n     * @returns {Promise.<Array.<Object|null>>} - filtered data\n     */","meta":{"range":[3375,3844],"filename":"RedisStorageEngine.js","lineno":101,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000340","name":"RedisStorageEngine#filter","type":"MethodDefinition","paramnames":["fn","ids","namespace"]},"vars":{"":null}},"description":"<p>Filter for an object</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use</p>","name":"fn"},{"type":{"names":["Array.<String>"]},"description":"<p>array of ids that should be used for the filtering</p>","name":"ids"},{"type":{"names":["String"]},"description":"<p>namespace of the filter</p>","name":"namespace"}],"returns":[{"type":{"names":["Promise.<Array.<(Object|null)>>"]},"description":"<ul>\n<li>filtered data</li>\n</ul>"}],"name":"filter","longname":"RedisStorageEngine#filter","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#filter"},{"comment":"/**\n     * Filter for an object and return after the first search success\n     * @param {Function} fn - filter function to use\n     * @param {String[]} ids - array of ids that should be used for the filtering\n     * @param {String} namespace - namespace of the filter\n     * @returns {Promise.<Object|null>} - the first result or null if nothing was found\n     */","meta":{"range":[4218,4764],"filename":"RedisStorageEngine.js","lineno":124,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000415","name":"RedisStorageEngine#find","type":"MethodDefinition","paramnames":["fn","ids","namespace"]},"vars":{"":null}},"description":"<p>Filter for an object and return after the first search success</p>","params":[{"type":{"names":["function"]},"description":"<p>filter function to use</p>","name":"fn"},{"type":{"names":["Array.<String>"]},"description":"<p>array of ids that should be used for the filtering</p>","name":"ids","defaultvalue":null},{"type":{"names":["String"]},"description":"<p>namespace of the filter</p>","name":"namespace"}],"returns":[{"type":{"names":["Promise.<(Object|null)>"]},"description":"<ul>\n<li>the first result or null if nothing was found</li>\n</ul>"}],"name":"find","longname":"RedisStorageEngine#find","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#find"},{"comment":"/**\n     * Get an object from the cache via id\n     * @param {String} id - id of the object\n     * @param {Boolean} useHash - whether to use hash objects for this action\n     * @returns {Promise.<*>}\n     */","meta":{"range":[1675,1921],"filename":"RedisStorageEngine.js","lineno":51,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000197","name":"RedisStorageEngine#get","type":"MethodDefinition","paramnames":["id","useHash"]},"vars":{"":null}},"description":"<p>Get an object from the cache via id</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the object</p>","name":"id"},{"type":{"names":["Boolean"]},"description":"<p>whether to use hash objects for this action</p>","name":"useHash"}],"returns":[{"type":{"names":["Promise.<*>"]}}],"name":"get","longname":"RedisStorageEngine#get","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#get"},{"comment":"/**\n     * Get the amount of items within a list\n     * @param {String} listId - id of the list\n     * @returns {Promise.<*>}\n     */","meta":{"range":[6300,6381],"filename":"RedisStorageEngine.js","lineno":198,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000577","name":"RedisStorageEngine#getListCount","type":"MethodDefinition","paramnames":["listId"]},"vars":{"":null}},"description":"<p>Get the amount of items within a list</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the list</p>","name":"listId"}],"returns":[{"type":{"names":["Promise.<*>"]}}],"name":"getListCount","longname":"RedisStorageEngine#getListCount","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#getListCount"},{"comment":"/**\n     * Get a list of values that are part of a list\n     * @param {String} listId - id of the list\n     * @returns {Promise.<String[]>} - array of ids that are members of the list\n     */","meta":{"range":[4966,5052],"filename":"RedisStorageEngine.js","lineno":149,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000500","name":"RedisStorageEngine#getListMembers","type":"MethodDefinition","paramnames":["listId"]},"vars":{"":null}},"description":"<p>Get a list of values that are part of a list</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the list</p>","name":"listId"}],"returns":[{"type":{"names":["Promise.<Array.<String>>"]},"description":"<ul>\n<li>array of ids that are members of the list</li>\n</ul>"}],"name":"getListMembers","longname":"RedisStorageEngine#getListMembers","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#getListMembers"},{"comment":"/**\n     * Initialize the storage engine and create a connection to redis\n     * @returns {Promise.<void>}\n     */","meta":{"range":[1199,1457],"filename":"RedisStorageEngine.js","lineno":34,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000156","name":"RedisStorageEngine#initialize","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Initialize the storage engine and create a connection to redis</p>","returns":[{"type":{"names":["Promise.<void>"]}}],"name":"initialize","longname":"RedisStorageEngine#initialize","kind":"function","memberof":"RedisStorageEngine","scope":"instance","params":[],"$longname":"RedisStorageEngine#initialize"},{"comment":"/**\n     * Check if an id is part of a list\n     * @param {String} listId - id of the list\n     * @param {String} id - id that should be checked\n     * @returns {Promise.<boolean>}\n     */","meta":{"range":[5552,5680],"filename":"RedisStorageEngine.js","lineno":169,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000528","name":"RedisStorageEngine#isListMember","type":"MethodDefinition","paramnames":["listId","id"]},"vars":{"":null}},"description":"<p>Check if an id is part of a list</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the list</p>","name":"listId"},{"type":{"names":["String"]},"description":"<p>id that should be checked</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<boolean>"]}}],"name":"isListMember","longname":"RedisStorageEngine#isListMember","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#isListMember"},{"comment":"/**\n     * Parse loaded data\n     * @param data\n     * @returns {Object|null}\n     */","meta":{"range":[6625,6695],"filename":"RedisStorageEngine.js","lineno":215,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000601","name":"RedisStorageEngine#parseData","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"description":"<p>Parse loaded data</p>","params":[{"name":"data"}],"returns":[{"type":{"names":["Object","null"]}}],"name":"parseData","longname":"RedisStorageEngine#parseData","kind":"function","memberof":"RedisStorageEngine","scope":"instance","$longname":"RedisStorageEngine#parseData"},{"comment":"/**\n     * Prepare data for storage inside redis\n     * @param data\n     */","meta":{"range":[6467,6529],"filename":"RedisStorageEngine.js","lineno":206,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000590","name":"RedisStorageEngine#prepareData","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"description":"<p>Prepare data for storage inside redis</p>","params":[{"name":"data"}],"name":"prepareData","longname":"RedisStorageEngine#prepareData","kind":"function","memberof":"RedisStorageEngine","scope":"instance","$longname":"RedisStorageEngine#prepareData"},{"comment":"/**\n     * Prepare a namespace for a KEYS operation by adding a * at the end\n     * @param {String} namespace - namespace to prepare\n     * @returns {string} namespace + *\n     */","meta":{"range":[6885,6990],"filename":"RedisStorageEngine.js","lineno":224,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000615","name":"RedisStorageEngine#prepareNamespace","type":"MethodDefinition","paramnames":["namespace"]},"vars":{"":null}},"description":"<p>Prepare a namespace for a KEYS operation by adding a * at the end</p>","params":[{"type":{"names":["String"]},"description":"<p>namespace to prepare</p>","name":"namespace"}],"returns":[{"type":{"names":["string"]},"description":"<p>namespace + *</p>"}],"name":"prepareNamespace","longname":"RedisStorageEngine#prepareNamespace","kind":"function","memberof":"RedisStorageEngine","scope":"instance","$longname":"RedisStorageEngine#prepareNamespace"},{"comment":"/**\n     * Remove an object from the cache\n     * @param {String} id - id of the object\n     * @param {Boolean} useHash - whether to use hash objects for this action\n     * @returns {Promise.<void>}\n     */","meta":{"range":[2807,3067],"filename":"RedisStorageEngine.js","lineno":85,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000298","name":"RedisStorageEngine#remove","type":"MethodDefinition","paramnames":["id","useHash"]},"vars":{"":null}},"description":"<p>Remove an object from the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the object</p>","name":"id"},{"type":{"names":["Boolean"]},"description":"<p>whether to use hash objects for this action</p>","name":"useHash"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"remove","longname":"RedisStorageEngine#remove","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#remove"},{"comment":"/**\n     * Remove an id from a list\n     * @param {String} listId - id of the list\n     * @param {String} id - id that should be removed\n     * @returns {Promise.<void>}\n     */","meta":{"range":[5868,5958],"filename":"RedisStorageEngine.js","lineno":180,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000550","name":"RedisStorageEngine#removeFromList","type":"MethodDefinition","paramnames":["listId","id"]},"vars":{"":null}},"description":"<p>Remove an id from a list</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the list</p>","name":"listId"},{"type":{"names":["String"]},"description":"<p>id that should be removed</p>","name":"id"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeFromList","longname":"RedisStorageEngine#removeFromList","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#removeFromList"},{"comment":"/**\n     * Remove a list\n     * @param {String} listId - id of the list\n     * @returns {Promise.<void>}\n     */","meta":{"range":[6081,6156],"filename":"RedisStorageEngine.js","lineno":189,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000565","name":"RedisStorageEngine#removeList","type":"MethodDefinition","paramnames":["listId"]},"vars":{"":null}},"description":"<p>Remove a list</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the list</p>","name":"listId"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"removeList","longname":"RedisStorageEngine#removeList","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#removeList"},{"comment":"/**\n     * Upsert an object into the cache\n     * @param {String} id - id of the object\n     * @param {Object} updateData - the new Data which get's merged with the old\n     * @param {Boolean} useHash - whether to use hash objects for this action\n     * @returns {Promise.<void>}\n     */","meta":{"range":[2219,2590],"filename":"RedisStorageEngine.js","lineno":67,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000236","name":"RedisStorageEngine#upsert","type":"MethodDefinition","paramnames":["id","updateData","useHash"]},"vars":{"":null}},"description":"<p>Upsert an object into the cache</p>","params":[{"type":{"names":["String"]},"description":"<p>id of the object</p>","name":"id"},{"type":{"names":["Object"]},"description":"<p>the new Data which get's merged with the old</p>","name":"updateData"},{"type":{"names":["Boolean"]},"description":"<p>whether to use hash objects for this action</p>","name":"useHash"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"upsert","longname":"RedisStorageEngine#upsert","kind":"function","memberof":"RedisStorageEngine","scope":"instance","async":true,"$longname":"RedisStorageEngine#upsert"}]},{"comment":"/**\n     * Create a new redis storage engine\n     * @param {Object} options\n     * @param {Boolean} [options.useHash=false] - whether hash objects should be used for storing data\n     */","meta":{"range":[892,1074],"filename":"RedisStorageEngine.js","lineno":22,"columnno":4,"path":"/home/travis/build/DasWolke/RainCache/src/storageEngine","code":{"id":"astnode100000120","name":"RedisStorageEngine","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"<p>Create a new redis storage engine</p>","params":[{"type":{"names":["Object"]},"name":"options"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"<p>whether hash objects should be used for storing data</p>","name":"options.useHash"}],"name":"RedisStorageEngine","longname":"RedisStorageEngine","kind":"class","scope":"global","$longname":"RedisStorageEngine"}],"symbols":["RedisStorageEngine","RedisStorageEngine","RedisStorageEngine#addToList","RedisStorageEngine#filter","RedisStorageEngine#find","RedisStorageEngine#get","RedisStorageEngine#getListCount","RedisStorageEngine#getListMembers","RedisStorageEngine#initialize","RedisStorageEngine#isListMember","RedisStorageEngine#parseData","RedisStorageEngine#prepareData","RedisStorageEngine#prepareNamespace","RedisStorageEngine#remove","RedisStorageEngine#removeFromList","RedisStorageEngine#removeList","RedisStorageEngine#upsert"]}},"app":{"title":"RainCache","base":"/RainCache/","entrance":"content:index","routing":{"method":"query","caseSensitive":true},"server":"github","meta":null},"template":{"name":"Docma Default Template","version":"1.7.0","author":"Onur Yıldırım (onur@cutepilot.com)","license":"MIT","main":"index.html","options":{"navItems":[{"label":"Home","href":"?content=index"},{"label":"Documentation","iconClass":"ico ico-book","items":[{"label":"Cache","href":"?api=RainCache#RainCache"},{"label":"Connectors","href":"?api=Connectors"},{"label":"Storage Engines","href":"?api=StorageEngines"}]},{"label":"GitHub","href":"https://github.com/DasWolke/RainCache","target":"_blank","iconClass":"ico-md ico-github"}],"title":"","sidebar":true,"collapsed":false,"outline":"flat","badges":true,"symbolMeta":false,"search":true,"navbar":true}},"_":{"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","logsEnabled":false}};
!function(){var e={};e.createChild=function(e,t,n){n=n||{};var o=document.createElement(t||"div");return Object.keys(n).forEach(function(e){o[e]=n[e]}),e.appendChild(o),o},e.getDocmaElem=function(){var t=document.getElementById(docma._.elementID);return t||(t=e.createChild(document.body,"div",{id:docma._.elementID})),t},e.getContentElem=function(){var e=document.getElementById(docma._.contentElementID);if(!e)throw new Error("Partial "+docma._.partials.content+' should have an element with id="'+docma._.contentElementID+'".');return e},e.loadCompiledContent=function(t){e.getDocmaElem().innerHTML=t},e.loadContent=function(t){e.getContentElem().innerHTML=t,e.scrollTo()},e.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var o=document.documentElement;return{top:n.top+window.pageYOffset-o.clientTop,left:n.left+window.pageXOffset-o.clientLeft}}}},e.scrollTo=function(t){if(!(t=(t||window.location.hash||"").replace(/^#/,"")))return void(document.body.scrollTop=0);var n=document.getElementById(t);n&&(document.body.scrollTop=e.getOffset(n).top)},e.fixAnchors=function(){docma.app.base&&setTimeout(function(){var e,t,n=document.querySelectorAll('a[href^="#"]');for(e=0;e<n.length;e++){t=n[e];var o=t.getAttribute("href");"#"===o.slice(0,1)&&o.length>1&&(o=window.location.pathname+(window.location.search||"")+o,t.setAttribute("href",o))}},50)},docma.dom=Object.freeze(e)}();
!function(){dust.filters=dust.filters||{},dust.filters.$pt=function(t){return docma.utils.parseTicks(t)},dust.filters.$pnl=function(t){return docma.utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return docma.utils.parseLinks(t)},dust.filters.$tl=function(t){return docma.utils.trimLeft(t)},dust.filters.$p=function(t){return docma.utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return docma.utils.normalizeTabs(t)},dust.filters.$desc=function(t){return docma.utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""};var t=/true|false|null|undefined|Infinity|NaN|\d+|Number\.\w+|Math\.(PI|E|LN(2|10)|LOG(2|10)E|SQRT(1_)?2)|\[.*?]|\{.*?}|new [a-zA-Z]+.*|\/.+\/[gmiu]*|Date\.(now\(\)|UTC\(.*)|window|document/;dust.filters.$val=function(e){var n=docma.utils.notate(e,"meta.code.value");if(void 0===n)return"";if("string"!=typeof n)return n;var i=docma.utils.notate(e,"type.names")||[];return!/['"`]/.test(n.slice(0,1))&&i.indexOf("String")>=0&&(1===i.length||-1===t.indexOf(n))?'"'+n+'"':n},dust.filters.$id=function(t){var e;if("string"==typeof t)e=t;else{e=(docma.utils.isConstructor(t)?"new-":"")+t.$longname}return e.replace(/ /g,"-")}}();
!function(){function o(o,e,n){return e?(o&&"/"!==e.slice(0,1)&&(e="/"+e),n&&"/"!==e.slice(-1)&&(e+="/"),e):o||n?"/":""}function e(o,e){e=void 0===e?window.location.search||"":e,"?"===e.slice(0,1)&&(e=e.slice(1)),o=o.replace(/[\[\]]/g,"\\$&");var n=new RegExp("&?"+o+"(=([^&#]*)|&|#|$)"),a=n.exec(e);return a&&a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):""}Object.defineProperty(docma,"location",{configurable:!1,get:function(){var n=o(!0,window.location.pathname,!0),a=o(!0,docma.app.base,!0),c=n;return n.slice(0,a.length)===a&&(c=n.slice(a.length-1,n.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:o(!0,docma.app.entrance,!1),base:a,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:n,pathname:c,path:c+(window.location.search||""),getQuery:e}}}),docma.location=Object.freeze(docma.location)}();
!function(){function e(e){return e&&""!==e.trim()?e:null}function n(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2")}function t(e){return e}var r={};r.notate=function(e,n){if("object"==typeof e){var t,i=Array.isArray(n)?n:n.split("."),a=i[0];if(a)return t=e[a],i.length>1?(i.shift(),r.notate(t,i)):t}},r.getName=function(e){if(e.alias){var t=n(r.notate(e,"meta.code.name")||"");if(t)return t.replace(/.*?[#.~:](\w+)$/i,"$1")}return e.name},r.getLongName=function(e){var t=n(e.longname);if(e.alias){var i=n(r.notate(e,"meta.code.name")||"");if(!i)return t;var a=n(e.memberof||"");if(!a)return i;var o=new RegExp("^"+a+"[#\\.~:]"),s="instance"===e.scope?"#":".";return o.test(i)?i:a+s+i}return t},r.getFullName=r.getLongName,r.getCodeName=function(e){return n(r.notate(e,"meta.code.name")||"")||r.getLongName(e)},r.getSymbolByName=function(e,n){var t,i;for(t=0;t<e.length;t++){if(i=e[t],i.name===n||i.longname===n||r.getFullName(i)===n)return i;if(i.$members){var a=r.getSymbolByName(i.$members,n);if(a)return a}}return null},r.isDeprecated=function(e){return e.deprecated},r.isGlobal=function(e){return"global"===e.scope},r.isNamespace=function(e){return"namespace"===e.kind},r.isModule=function(e){return"module"===e.kind},r.isClass=function(e){return!r.isConstructor(e)&&("class"===e.kind||"ClassDeclaration"===r.notate(e,"meta.code.type"))},r.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===r.notate(e,"meta.code.type")},r.isStaticMember=function(e){return"static"===e.scope},r.isStatic=r.isStaticMember,r.isInner=function(e){return"inner"===e.scope},r.isInstanceMember=function(e){return"instance"===e.scope},r.isMethod=function(e){var n=r.notate(e,"meta.code.type");return"function"===e.kind||"MethodDefinition"===n||"FunctionExpression"===n},r.isFunction=r.isMethod,r.isInstanceMethod=function(e){return r.isInstanceMember(e)&&r.isMethod(e)},r.isStaticMethod=function(e){return r.isStaticMember(e)&&r.isMethod(e)},r.isProperty=function(e){return"member"===e.kind},r.isInstanceProperty=function(e){return r.isInstanceMember(e)&&r.isProperty(e)},r.isStaticProperty=function(e){return r.isStaticMember(e)&&r.isProperty(e)},r.isTypeDef=function(e){return"typedef"===e.kind},r.isCustomType=r.isTypeDef,r.isEnum=function(e){return e.isEnum},r.isReadOnly=function(e){return e.readonly},r.isPublic=function(e){return"string"!=typeof e.access||"public"===e.access},r.isPrivate=function(e){return"private"===e.access},r.isProtected=function(e){return"protected"===e.access},r.isUndocumented=function(e){return!e.comments},r.hasDescription=function(n){return Boolean(e(n.classdesc)||e(n.description))},r.getTypes=function(e){if("class"===e.kind)return"class";var n=r.notate(e,"type.names")||[];return n=n.map(function(e){return e.replace(/\.</g,"<")}).join("|"),e.isEnum?"enum<"+n+">":n},r.getReturnTypes=function(e){var n=e.returns;if(!Array.isArray(n))return"void";var t,i=n.reduce(function(e,n){return t=r.notate(n,"type.names"),Array.isArray(t)?e.concat(t):e},[]);return i.length>0?i.join("|"):"void"},r.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},r.parseTicks=function(e){return e.replace(/(```\s*)([\s\S]*?)(\s*```)/g,function(e,n,t){return r.normalizeTabs(r._wrapEscapeCode(t,!0).replace(/`/g,"&#x60;"))}).replace(/(`)(.*?)(`)/g,function(e,n,t){return r._wrapEscapeCode(t)})},r.parseNewLines=function(e,n){return n=n||{},r._tokenize(e,function(e,t){if(t)return e;var r=e.split(/[\r\n]{2,}/);return r.length<=1&&n.keepIfSingle?e:r.map(function(e){return"<p>"+e+"</p>"}).join("")}).join("")},r.parseLinks=function(e,n){n=n||{};var t=/\{@link +([^}]*?)\}/g,i=e.replace(t,function(e,t){var r,i,a=t.split("|");return 1===a.length?r=i=a[0].trim():(r=a[0].trim(),i=a[1].trim()),'<a href="'+r+'"'+(n.target?' target="'+n.target+'"':"")+">"+i+"</a>"});return r.parseTicks(i)},r.parse=function(e,n){return n=n||{},e=r.trimLeft(e),e=r.parseNewLines(e,n),e=r.parseTicks(e),r.parseLinks(e,n)},r.normalizeTabs=function(e){var n=e.match(/^\s*/gm),t=1/0;if(n.forEach(function(e,n){e=e.replace(/\t/g,"  "),n>0&&(t=Math.min(e.length,t))}),t!==1/0){var r=new RegExp("^\\s{"+t+"}","g");e=e.replace(r,"")}e=e.replace(/^\s*/,"");var i;return e.replace(/([\r\n]+)(\s+)/gm,function(e,n,t){return i=t.replace(/\t/g,"  "),i=new Array(i.length-i.length%2+1).join(" "),n+i})},r.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var n=r.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return r.isConstructor(e)&&(n+=" constructor"),r.isMethod(e)&&(n+=" method"),r.isProperty(e)&&(n+=" property"),n.replace(/[><"'`\n\r]/g,"").toLowerCase()},r.getCodeFileInfo=function(e){return{filename:r.notate(e,"meta.filename"),lineno:r.notate(e,"meta.lineno"),path:r.notate(e,"meta.path")}},r.listType=function(e){return e.map(function(e){return r._wrapEscapeCode(e)}).join(", ")},r.listTypeDesc=function(e){if(!e||0===e.length)return"";var n,t=e.map(function(e){return n=r.parse(e.description||"",{keepIfSingle:!0}),n&&(n="&nbsp;&nbsp;—&nbsp;&nbsp;"+n),r._wrapEscapeCode(e.type.names.join("|"))+n});return t.length>1?"<ul>\n"+t.join("</li>\n<li>")+"\n</ul>":t},r._find=function(e,n){if(!e||!n)return null;var t,r,i=null;for(t=0;t<e.length;t++)if((r=e[t])&&"object"==typeof r){for(var a in n)if(void 0!==n[a]&&n.hasOwnProperty(a)){if(n[a]!==r[a]){i=null;break}i=r}if(i)break}return i},r._assign=function(e,n,t){e=e||{};var r;for(r in n)n.hasOwnProperty(r)&&(t?Object.defineProperty(e,r,{enumerable:!0,value:n[r]}):e[r]=n[r]);return e},r._values=function(e){if(Array.isArray(e))return e;var n,t=[];for(n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t},r._wrapEscapeCode=function(e,n){return e=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"),e="<code>"+e+"</code>",n?"<pre>"+e+"</pre>":e},r._tokenize=function(e,n){"function"!=typeof n&&(n=t);if(e.indexOf("```")<0)return[n(e,!1)];var r,i="```".length,a="",o="",s=[],u=!1;for(r=0;r<e.length;r++)a+=e[r],o+=e[r],a.length>i&&(a=a.slice(-i)),"```"===a&&(u=!u,u?(s.push(n(o.slice(0,-i),!1)),o=a):(s.push(n(o,!0)),o=""));return s},docma.utils=r}();
!function(){function t(t,e){l.info("Event:",t,e?e[0]:""),y.trigger(t,e)}function e(t,n){if(n&&!(u.indexOf(n)<0)){if(t)docma.app.routing.caseSensitive||(t=t.toLowerCase());else{if(n!==e.Type.API)return;t=f}var o=p._find(docma.routes,{type:n,name:t});o&&p._assign(this,o)}}function n(t,e){dust.render(t,docma,function(t,n){if(t)throw t;m.loadCompiledContent(n),"function"==typeof e&&e()})}function o(){t(docma.Event.Render,[docma.currentRoute]),d&&(t(docma.Event.Ready),d=!1)}function r(o,r){docma._.currentRoute=e.create(null),n(docma._.partials.notFound,function(){if(t(docma.Event.Render,[null]),m.scrollTo(),"function"==typeof r)return r(404);throw new Error("Page or content not found for route: "+JSON.stringify(o))})}function a(){if(s){var t=sessionStorage.getItem("redirectPath")||null;if(t)return sessionStorage.removeItem("redirectPath"),l.info("Redirecting to:",t),page.redirect(t),!0}return!1}function i(t){var e=t||window.location.search;return/^[?&]/.test(e)&&(e=e.slice(1)),e||null}var c,u,d=!1,s="path"===docma.app.routing.method,f="_def_",p=docma.utils,m=docma.dom,l={};["log","info","warn","error"].forEach(function(t){!function(){l[t]=function(){docma._.logsEnabled&&console[t].apply(console,arguments)}}()}),docma.addFilter=function(t,e){if(docma.filterExists(t))throw new Error('Filter "'+t+'" already exists.');return dust.filters[t]=e,docma},docma.removeFilter=function(t){return delete dust.filters[t],docma},docma.filterExists=function(t){return"function"==typeof dust.filters[t]};var y=new EventEmitter;docma.Event={Ready:"ready",Render:"render",Route:"route"},docma.on=function(t,e){return y.on.apply(y,arguments),docma},docma.once=function(){return y.once.apply(y,arguments),docma},docma.off=function(){return y.off.apply(y,arguments),docma},docma.addListener=docma.on,docma.addListenerOnce=docma.once,docma.removeListener=docma.off,Object.defineProperty(docma,"currentRoute",{configurable:!1,get:function(){return docma._.currentRoute}}),Object.defineProperty(docma,"documentation",{configurable:!1,get:function(){return docma._.documentation}}),Object.defineProperty(docma,"symbols",{configurable:!1,get:function(){return docma._.symbols}}),e.Type={API:"api",CONTENT:"content"},u=p._values(e.Type),e.prototype.exists=function(){return Boolean(this.id)},e.prototype.isEqualTo=function(t){return!!(t&&t.exists()&&this.exists())&&t.path===this.path},e.prototype.isCurrent=function(){return this.isEqualTo(docma.currentRoute)},e.prototype.apply=function(){return this.type===e.Type.API?(docma._.documentation=docma.apis[this.name].documentation,docma._.symbols=docma.apis[this.name].symbols):(docma._.documentation=null,docma._.symbols=null),t(docma.Event.Route,[this]),docma.render(this),this},e.prototype.toString=function(){return JSON.stringify(this)},e.create=function(t,n){return new e(t,n)},e.fromID=function(t){if("string"!=typeof t)return l.warn("Route ID is not a string: "+t),new e(null);var n=t.split(":");return new e(n[1],n[0])},e.fromQuery=function(t){if(!t)return new e(null);var n=t.split("&")[0].split("="),o=n[0].toLowerCase();return new e(n[1],o)},Object.defineProperty(docma,"Route",{configurable:!1,get:function(){return e}}),docma.fetch=function(t,e){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){var o=200===n.status?n.responseText:"";return l.log("XHR GET:",n.status,t),e(n.status,o)}},n.open("GET",t,!0),n.send()},docma.render=function(t,a){if(!t||!t.exists())return r(t,a);if(!t.isEqualTo(docma.currentRoute)){docma._.currentRoute=t;var i="function"==typeof a;t.type===e.Type.API?n(docma._.partials.api,function(){o(),i&&a(200),m.fixAnchors(),m.scrollTo()}):docma.fetch(t.contentPath,function(e,c){if(404===e)return r(t,a);n(docma._.partials.content,function(){m.loadContent(c),o(),i&&a(e),m.fixAnchors()})})}},docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),s&&(page("(/)?api/:apiName?",function(t,n){var o=t.params.apiName||f,r=e.create(o,e.Type.API);if(!r||!r.exists())return n();r.apply()}),page("(/)?:content",function(t,n){var o=t.params.content,r=e.create(o,e.Type.CONTENT);if(!r||!r.exists())return n();r.apply()})),page("(/)?",function(t,n){a()||setTimeout(function(){var o,r=i(t.querystring);if(s){if(r)return n();o=c}else l.log("Query-string:",r),o=r?e.fromQuery(r):c;if(!o||!o.exists())return n();o.isCurrent()||o.apply()},100)}),page("*",function(t){l.warn("Unknown Route:",t.path),e.create(null).apply()}),l.info("Docma SPA Configuration:"),l.info("App Title:          ",docma.app.title),l.info("Routing Method:     ",docma.app.routing.method),l.info("App Server:         ",docma.app.server),l.info("Base Path:          ",docma.app.base),l.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){d=!0,c=e.fromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),l.info("Docma SPA loaded!")}}();
docma = Object.freeze(docma);